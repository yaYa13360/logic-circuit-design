// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2021 23:45:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    genFace
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module genFace_vlg_sample_tst(
	clock,
	gameStatus,
	TFS,
	sampler_tx
);
input  clock;
input  gameStatus;
input  TFS;
output sampler_tx;

reg sample;
time current_time;
always @(clock or gameStatus or TFS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module genFace_vlg_check_tst (
	col2_0,
	col2_1,
	col2_2,
	col2_3,
	col2_4,
	col2_5,
	col2_6,
	col2_7,
	col_s0,
	col_s1,
	col_s2,
	col_s3,
	col_s4,
	col_s5,
	col_s6,
	col_s7,
	row_s0,
	row_s1,
	row_s2,
	row_s3,
	row_s4,
	row_s5,
	row_s6,
	row_s7,
	sampler_rx
);
input  col2_0;
input  col2_1;
input  col2_2;
input  col2_3;
input  col2_4;
input  col2_5;
input  col2_6;
input  col2_7;
input  col_s0;
input  col_s1;
input  col_s2;
input  col_s3;
input  col_s4;
input  col_s5;
input  col_s6;
input  col_s7;
input  row_s0;
input  row_s1;
input  row_s2;
input  row_s3;
input  row_s4;
input  row_s5;
input  row_s6;
input  row_s7;
input sampler_rx;

reg  col2_0_expected;
reg  col2_1_expected;
reg  col2_2_expected;
reg  col2_3_expected;
reg  col2_4_expected;
reg  col2_5_expected;
reg  col2_6_expected;
reg  col2_7_expected;
reg  col_s0_expected;
reg  col_s1_expected;
reg  col_s2_expected;
reg  col_s3_expected;
reg  col_s4_expected;
reg  col_s5_expected;
reg  col_s6_expected;
reg  col_s7_expected;
reg  row_s0_expected;
reg  row_s1_expected;
reg  row_s2_expected;
reg  row_s3_expected;
reg  row_s4_expected;
reg  row_s5_expected;
reg  row_s6_expected;
reg  row_s7_expected;

reg  col2_0_prev;
reg  col2_1_prev;
reg  col2_2_prev;
reg  col2_3_prev;
reg  col2_4_prev;
reg  col2_5_prev;
reg  col2_6_prev;
reg  col2_7_prev;
reg  col_s0_prev;
reg  col_s1_prev;
reg  col_s2_prev;
reg  col_s3_prev;
reg  col_s4_prev;
reg  col_s5_prev;
reg  col_s6_prev;
reg  col_s7_prev;
reg  row_s0_prev;
reg  row_s1_prev;
reg  row_s2_prev;
reg  row_s3_prev;
reg  row_s4_prev;
reg  row_s5_prev;
reg  row_s6_prev;
reg  row_s7_prev;

reg  col2_0_expected_prev;
reg  col2_1_expected_prev;
reg  col2_2_expected_prev;
reg  col2_3_expected_prev;
reg  col2_4_expected_prev;
reg  col2_5_expected_prev;
reg  col2_6_expected_prev;
reg  col2_7_expected_prev;
reg  col_s0_expected_prev;
reg  col_s1_expected_prev;
reg  col_s2_expected_prev;
reg  col_s3_expected_prev;
reg  col_s4_expected_prev;
reg  col_s5_expected_prev;
reg  col_s6_expected_prev;
reg  col_s7_expected_prev;
reg  row_s0_expected_prev;
reg  row_s1_expected_prev;
reg  row_s2_expected_prev;
reg  row_s3_expected_prev;
reg  row_s4_expected_prev;
reg  row_s5_expected_prev;
reg  row_s6_expected_prev;
reg  row_s7_expected_prev;

reg  last_col2_0_exp;
reg  last_col2_1_exp;
reg  last_col2_2_exp;
reg  last_col2_3_exp;
reg  last_col2_4_exp;
reg  last_col2_5_exp;
reg  last_col2_6_exp;
reg  last_col2_7_exp;
reg  last_col_s0_exp;
reg  last_col_s1_exp;
reg  last_col_s2_exp;
reg  last_col_s3_exp;
reg  last_col_s4_exp;
reg  last_col_s5_exp;
reg  last_col_s6_exp;
reg  last_col_s7_exp;
reg  last_row_s0_exp;
reg  last_row_s1_exp;
reg  last_row_s2_exp;
reg  last_row_s3_exp;
reg  last_row_s4_exp;
reg  last_row_s5_exp;
reg  last_row_s6_exp;
reg  last_row_s7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:24] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 24'b1;
end

// update real /o prevs

always @(trigger)
begin
	col2_0_prev = col2_0;
	col2_1_prev = col2_1;
	col2_2_prev = col2_2;
	col2_3_prev = col2_3;
	col2_4_prev = col2_4;
	col2_5_prev = col2_5;
	col2_6_prev = col2_6;
	col2_7_prev = col2_7;
	col_s0_prev = col_s0;
	col_s1_prev = col_s1;
	col_s2_prev = col_s2;
	col_s3_prev = col_s3;
	col_s4_prev = col_s4;
	col_s5_prev = col_s5;
	col_s6_prev = col_s6;
	col_s7_prev = col_s7;
	row_s0_prev = row_s0;
	row_s1_prev = row_s1;
	row_s2_prev = row_s2;
	row_s3_prev = row_s3;
	row_s4_prev = row_s4;
	row_s5_prev = row_s5;
	row_s6_prev = row_s6;
	row_s7_prev = row_s7;
end

// update expected /o prevs

always @(trigger)
begin
	col2_0_expected_prev = col2_0_expected;
	col2_1_expected_prev = col2_1_expected;
	col2_2_expected_prev = col2_2_expected;
	col2_3_expected_prev = col2_3_expected;
	col2_4_expected_prev = col2_4_expected;
	col2_5_expected_prev = col2_5_expected;
	col2_6_expected_prev = col2_6_expected;
	col2_7_expected_prev = col2_7_expected;
	col_s0_expected_prev = col_s0_expected;
	col_s1_expected_prev = col_s1_expected;
	col_s2_expected_prev = col_s2_expected;
	col_s3_expected_prev = col_s3_expected;
	col_s4_expected_prev = col_s4_expected;
	col_s5_expected_prev = col_s5_expected;
	col_s6_expected_prev = col_s6_expected;
	col_s7_expected_prev = col_s7_expected;
	row_s0_expected_prev = row_s0_expected;
	row_s1_expected_prev = row_s1_expected;
	row_s2_expected_prev = row_s2_expected;
	row_s3_expected_prev = row_s3_expected;
	row_s4_expected_prev = row_s4_expected;
	row_s5_expected_prev = row_s5_expected;
	row_s6_expected_prev = row_s6_expected;
	row_s7_expected_prev = row_s7_expected;
end



// expected col2_0
initial
begin
	col2_0_expected = 1'bX;
end 

// expected col2_1
initial
begin
	col2_1_expected = 1'bX;
end 

// expected col2_2
initial
begin
	col2_2_expected = 1'bX;
end 

// expected col2_3
initial
begin
	col2_3_expected = 1'bX;
end 

// expected col2_4
initial
begin
	col2_4_expected = 1'bX;
end 

// expected col2_5
initial
begin
	col2_5_expected = 1'bX;
end 

// expected col2_6
initial
begin
	col2_6_expected = 1'bX;
end 

// expected col2_7
initial
begin
	col2_7_expected = 1'bX;
end 

// expected col_s0
initial
begin
	col_s0_expected = 1'bX;
end 

// expected col_s1
initial
begin
	col_s1_expected = 1'bX;
end 

// expected col_s2
initial
begin
	col_s2_expected = 1'bX;
end 

// expected col_s3
initial
begin
	col_s3_expected = 1'bX;
end 

// expected col_s4
initial
begin
	col_s4_expected = 1'bX;
end 

// expected col_s5
initial
begin
	col_s5_expected = 1'bX;
end 

// expected col_s6
initial
begin
	col_s6_expected = 1'bX;
end 

// expected col_s7
initial
begin
	col_s7_expected = 1'bX;
end 

// expected row_s0
initial
begin
	row_s0_expected = 1'bX;
end 

// expected row_s1
initial
begin
	row_s1_expected = 1'bX;
end 

// expected row_s2
initial
begin
	row_s2_expected = 1'bX;
end 

// expected row_s3
initial
begin
	row_s3_expected = 1'bX;
end 

// expected row_s4
initial
begin
	row_s4_expected = 1'bX;
end 

// expected row_s5
initial
begin
	row_s5_expected = 1'bX;
end 

// expected row_s6
initial
begin
	row_s6_expected = 1'bX;
end 

// expected row_s7
initial
begin
	row_s7_expected = 1'bX;
end 
// generate trigger
always @(col2_0_expected or col2_0 or col2_1_expected or col2_1 or col2_2_expected or col2_2 or col2_3_expected or col2_3 or col2_4_expected or col2_4 or col2_5_expected or col2_5 or col2_6_expected or col2_6 or col2_7_expected or col2_7 or col_s0_expected or col_s0 or col_s1_expected or col_s1 or col_s2_expected or col_s2 or col_s3_expected or col_s3 or col_s4_expected or col_s4 or col_s5_expected or col_s5 or col_s6_expected or col_s6 or col_s7_expected or col_s7 or row_s0_expected or row_s0 or row_s1_expected or row_s1 or row_s2_expected or row_s2 or row_s3_expected or row_s3 or row_s4_expected or row_s4 or row_s5_expected or row_s5 or row_s6_expected or row_s6 or row_s7_expected or row_s7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected col2_0 = %b | expected col2_1 = %b | expected col2_2 = %b | expected col2_3 = %b | expected col2_4 = %b | expected col2_5 = %b | expected col2_6 = %b | expected col2_7 = %b | expected col_s0 = %b | expected col_s1 = %b | expected col_s2 = %b | expected col_s3 = %b | expected col_s4 = %b | expected col_s5 = %b | expected col_s6 = %b | expected col_s7 = %b | expected row_s0 = %b | expected row_s1 = %b | expected row_s2 = %b | expected row_s3 = %b | expected row_s4 = %b | expected row_s5 = %b | expected row_s6 = %b | expected row_s7 = %b | ",col2_0_expected_prev,col2_1_expected_prev,col2_2_expected_prev,col2_3_expected_prev,col2_4_expected_prev,col2_5_expected_prev,col2_6_expected_prev,col2_7_expected_prev,col_s0_expected_prev,col_s1_expected_prev,col_s2_expected_prev,col_s3_expected_prev,col_s4_expected_prev,col_s5_expected_prev,col_s6_expected_prev,col_s7_expected_prev,row_s0_expected_prev,row_s1_expected_prev,row_s2_expected_prev,row_s3_expected_prev,row_s4_expected_prev,row_s5_expected_prev,row_s6_expected_prev,row_s7_expected_prev);
	$display("| real col2_0 = %b | real col2_1 = %b | real col2_2 = %b | real col2_3 = %b | real col2_4 = %b | real col2_5 = %b | real col2_6 = %b | real col2_7 = %b | real col_s0 = %b | real col_s1 = %b | real col_s2 = %b | real col_s3 = %b | real col_s4 = %b | real col_s5 = %b | real col_s6 = %b | real col_s7 = %b | real row_s0 = %b | real row_s1 = %b | real row_s2 = %b | real row_s3 = %b | real row_s4 = %b | real row_s5 = %b | real row_s6 = %b | real row_s7 = %b | ",col2_0_prev,col2_1_prev,col2_2_prev,col2_3_prev,col2_4_prev,col2_5_prev,col2_6_prev,col2_7_prev,col_s0_prev,col_s1_prev,col_s2_prev,col_s3_prev,col_s4_prev,col_s5_prev,col_s6_prev,col_s7_prev,row_s0_prev,row_s1_prev,row_s2_prev,row_s3_prev,row_s4_prev,row_s5_prev,row_s6_prev,row_s7_prev);
`endif
	if (
		( col2_0_expected_prev !== 1'bx ) && ( col2_0_prev !== col2_0_expected_prev )
		&& ((col2_0_expected_prev !== last_col2_0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2_0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_0_expected_prev);
		$display ("     Real value = %b", col2_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_0_exp = col2_0_expected_prev;
	end
	if (
		( col2_1_expected_prev !== 1'bx ) && ( col2_1_prev !== col2_1_expected_prev )
		&& ((col2_1_expected_prev !== last_col2_1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_1_expected_prev);
		$display ("     Real value = %b", col2_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col2_1_exp = col2_1_expected_prev;
	end
	if (
		( col2_2_expected_prev !== 1'bx ) && ( col2_2_prev !== col2_2_expected_prev )
		&& ((col2_2_expected_prev !== last_col2_2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_2_expected_prev);
		$display ("     Real value = %b", col2_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_col2_2_exp = col2_2_expected_prev;
	end
	if (
		( col2_3_expected_prev !== 1'bx ) && ( col2_3_prev !== col2_3_expected_prev )
		&& ((col2_3_expected_prev !== last_col2_3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_3_expected_prev);
		$display ("     Real value = %b", col2_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_col2_3_exp = col2_3_expected_prev;
	end
	if (
		( col2_4_expected_prev !== 1'bx ) && ( col2_4_prev !== col2_4_expected_prev )
		&& ((col2_4_expected_prev !== last_col2_4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2_4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_4_expected_prev);
		$display ("     Real value = %b", col2_4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_col2_4_exp = col2_4_expected_prev;
	end
	if (
		( col2_5_expected_prev !== 1'bx ) && ( col2_5_prev !== col2_5_expected_prev )
		&& ((col2_5_expected_prev !== last_col2_5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_5_expected_prev);
		$display ("     Real value = %b", col2_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_col2_5_exp = col2_5_expected_prev;
	end
	if (
		( col2_6_expected_prev !== 1'bx ) && ( col2_6_prev !== col2_6_expected_prev )
		&& ((col2_6_expected_prev !== last_col2_6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2_6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_6_expected_prev);
		$display ("     Real value = %b", col2_6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_col2_6_exp = col2_6_expected_prev;
	end
	if (
		( col2_7_expected_prev !== 1'bx ) && ( col2_7_prev !== col2_7_expected_prev )
		&& ((col2_7_expected_prev !== last_col2_7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2_7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_7_expected_prev);
		$display ("     Real value = %b", col2_7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_col2_7_exp = col2_7_expected_prev;
	end
	if (
		( col_s0_expected_prev !== 1'bx ) && ( col_s0_prev !== col_s0_expected_prev )
		&& ((col_s0_expected_prev !== last_col_s0_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s0_expected_prev);
		$display ("     Real value = %b", col_s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_col_s0_exp = col_s0_expected_prev;
	end
	if (
		( col_s1_expected_prev !== 1'bx ) && ( col_s1_prev !== col_s1_expected_prev )
		&& ((col_s1_expected_prev !== last_col_s1_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s1_expected_prev);
		$display ("     Real value = %b", col_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_col_s1_exp = col_s1_expected_prev;
	end
	if (
		( col_s2_expected_prev !== 1'bx ) && ( col_s2_prev !== col_s2_expected_prev )
		&& ((col_s2_expected_prev !== last_col_s2_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s2_expected_prev);
		$display ("     Real value = %b", col_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_col_s2_exp = col_s2_expected_prev;
	end
	if (
		( col_s3_expected_prev !== 1'bx ) && ( col_s3_prev !== col_s3_expected_prev )
		&& ((col_s3_expected_prev !== last_col_s3_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s3_expected_prev);
		$display ("     Real value = %b", col_s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_col_s3_exp = col_s3_expected_prev;
	end
	if (
		( col_s4_expected_prev !== 1'bx ) && ( col_s4_prev !== col_s4_expected_prev )
		&& ((col_s4_expected_prev !== last_col_s4_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s4_expected_prev);
		$display ("     Real value = %b", col_s4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_col_s4_exp = col_s4_expected_prev;
	end
	if (
		( col_s5_expected_prev !== 1'bx ) && ( col_s5_prev !== col_s5_expected_prev )
		&& ((col_s5_expected_prev !== last_col_s5_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s5_expected_prev);
		$display ("     Real value = %b", col_s5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_col_s5_exp = col_s5_expected_prev;
	end
	if (
		( col_s6_expected_prev !== 1'bx ) && ( col_s6_prev !== col_s6_expected_prev )
		&& ((col_s6_expected_prev !== last_col_s6_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s6_expected_prev);
		$display ("     Real value = %b", col_s6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_col_s6_exp = col_s6_expected_prev;
	end
	if (
		( col_s7_expected_prev !== 1'bx ) && ( col_s7_prev !== col_s7_expected_prev )
		&& ((col_s7_expected_prev !== last_col_s7_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s7_expected_prev);
		$display ("     Real value = %b", col_s7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_col_s7_exp = col_s7_expected_prev;
	end
	if (
		( row_s0_expected_prev !== 1'bx ) && ( row_s0_prev !== row_s0_expected_prev )
		&& ((row_s0_expected_prev !== last_row_s0_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s0_expected_prev);
		$display ("     Real value = %b", row_s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_row_s0_exp = row_s0_expected_prev;
	end
	if (
		( row_s1_expected_prev !== 1'bx ) && ( row_s1_prev !== row_s1_expected_prev )
		&& ((row_s1_expected_prev !== last_row_s1_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s1_expected_prev);
		$display ("     Real value = %b", row_s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_s1_exp = row_s1_expected_prev;
	end
	if (
		( row_s2_expected_prev !== 1'bx ) && ( row_s2_prev !== row_s2_expected_prev )
		&& ((row_s2_expected_prev !== last_row_s2_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s2_expected_prev);
		$display ("     Real value = %b", row_s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_row_s2_exp = row_s2_expected_prev;
	end
	if (
		( row_s3_expected_prev !== 1'bx ) && ( row_s3_prev !== row_s3_expected_prev )
		&& ((row_s3_expected_prev !== last_row_s3_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s3_expected_prev);
		$display ("     Real value = %b", row_s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_row_s3_exp = row_s3_expected_prev;
	end
	if (
		( row_s4_expected_prev !== 1'bx ) && ( row_s4_prev !== row_s4_expected_prev )
		&& ((row_s4_expected_prev !== last_row_s4_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s4_expected_prev);
		$display ("     Real value = %b", row_s4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_row_s4_exp = row_s4_expected_prev;
	end
	if (
		( row_s5_expected_prev !== 1'bx ) && ( row_s5_prev !== row_s5_expected_prev )
		&& ((row_s5_expected_prev !== last_row_s5_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s5_expected_prev);
		$display ("     Real value = %b", row_s5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_row_s5_exp = row_s5_expected_prev;
	end
	if (
		( row_s6_expected_prev !== 1'bx ) && ( row_s6_prev !== row_s6_expected_prev )
		&& ((row_s6_expected_prev !== last_row_s6_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s6_expected_prev);
		$display ("     Real value = %b", row_s6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_row_s6_exp = row_s6_expected_prev;
	end
	if (
		( row_s7_expected_prev !== 1'bx ) && ( row_s7_prev !== row_s7_expected_prev )
		&& ((row_s7_expected_prev !== last_row_s7_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s7_expected_prev);
		$display ("     Real value = %b", row_s7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_row_s7_exp = row_s7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module genFace_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg gameStatus;
reg TFS;
// wires                                               
wire col2_0;
wire col2_1;
wire col2_2;
wire col2_3;
wire col2_4;
wire col2_5;
wire col2_6;
wire col2_7;
wire col_s0;
wire col_s1;
wire col_s2;
wire col_s3;
wire col_s4;
wire col_s5;
wire col_s6;
wire col_s7;
wire row_s0;
wire row_s1;
wire row_s2;
wire row_s3;
wire row_s4;
wire row_s5;
wire row_s6;
wire row_s7;

wire sampler;                             

// assign statements (if any)                          
genFace i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.col2_0(col2_0),
	.col2_1(col2_1),
	.col2_2(col2_2),
	.col2_3(col2_3),
	.col2_4(col2_4),
	.col2_5(col2_5),
	.col2_6(col2_6),
	.col2_7(col2_7),
	.col_s0(col_s0),
	.col_s1(col_s1),
	.col_s2(col_s2),
	.col_s3(col_s3),
	.col_s4(col_s4),
	.col_s5(col_s5),
	.col_s6(col_s6),
	.col_s7(col_s7),
	.gameStatus(gameStatus),
	.row_s0(row_s0),
	.row_s1(row_s1),
	.row_s2(row_s2),
	.row_s3(row_s3),
	.row_s4(row_s4),
	.row_s5(row_s5),
	.row_s6(row_s6),
	.row_s7(row_s7),
	.TFS(TFS)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// TFS
always
begin
	TFS = 1'b0;
	TFS = #20000 1'b1;
	#20000;
end 

// gameStatus
always
begin
	gameStatus = 1'b0;
	gameStatus = #10000 1'b1;
	#10000;
end 

genFace_vlg_sample_tst tb_sample (
	.clock(clock),
	.gameStatus(gameStatus),
	.TFS(TFS),
	.sampler_tx(sampler)
);

genFace_vlg_check_tst tb_out(
	.col2_0(col2_0),
	.col2_1(col2_1),
	.col2_2(col2_2),
	.col2_3(col2_3),
	.col2_4(col2_4),
	.col2_5(col2_5),
	.col2_6(col2_6),
	.col2_7(col2_7),
	.col_s0(col_s0),
	.col_s1(col_s1),
	.col_s2(col_s2),
	.col_s3(col_s3),
	.col_s4(col_s4),
	.col_s5(col_s5),
	.col_s6(col_s6),
	.col_s7(col_s7),
	.row_s0(row_s0),
	.row_s1(row_s1),
	.row_s2(row_s2),
	.row_s3(row_s3),
	.row_s4(row_s4),
	.row_s5(row_s5),
	.row_s6(row_s6),
	.row_s7(row_s7),
	.sampler_rx(sampler)
);
endmodule


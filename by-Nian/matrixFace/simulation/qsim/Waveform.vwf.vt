// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2021 15:38:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    matrixFace
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module matrixFace_vlg_sample_tst(
	clk,
	gameStatus,
	TFS,
	sampler_tx
);
input  clk;
input  gameStatus;
input  TFS;
output sampler_tx;

reg sample;
time current_time;
always @(clk or gameStatus or TFS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module matrixFace_vlg_check_tst (
	col2,
	col_s,
	row_s,
	sampler_rx
);
input [0:7] col2;
input [0:7] col_s;
input [0:7] row_s;
input sampler_rx;

reg [0:7] col2_expected;
reg [0:7] col_s_expected;
reg [0:7] row_s_expected;

reg [0:7] col2_prev;
reg [0:7] col_s_prev;
reg [0:7] row_s_prev;

reg [0:7] col2_expected_prev;
reg [0:7] col_s_expected_prev;
reg [0:7] row_s_expected_prev;

reg [0:7] last_col2_exp;
reg [0:7] last_col_s_exp;
reg [0:7] last_row_s_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	col2_prev = col2;
	col_s_prev = col_s;
	row_s_prev = row_s;
end

// update expected /o prevs

always @(trigger)
begin
	col2_expected_prev = col2_expected;
	col_s_expected_prev = col_s_expected;
	row_s_expected_prev = row_s_expected;
end


// expected col_s[ 7 ]
initial
begin
	col_s_expected[7] = 1'bX;
end 
// expected col_s[ 6 ]
initial
begin
	col_s_expected[6] = 1'bX;
end 
// expected col_s[ 5 ]
initial
begin
	col_s_expected[5] = 1'bX;
end 
// expected col_s[ 4 ]
initial
begin
	col_s_expected[4] = 1'bX;
end 
// expected col_s[ 3 ]
initial
begin
	col_s_expected[3] = 1'bX;
end 
// expected col_s[ 2 ]
initial
begin
	col_s_expected[2] = 1'bX;
end 
// expected col_s[ 1 ]
initial
begin
	col_s_expected[1] = 1'bX;
end 
// expected col_s[ 0 ]
initial
begin
	col_s_expected[0] = 1'bX;
end 
// expected col2[ 7 ]
initial
begin
	col2_expected[7] = 1'bX;
end 
// expected col2[ 6 ]
initial
begin
	col2_expected[6] = 1'bX;
end 
// expected col2[ 5 ]
initial
begin
	col2_expected[5] = 1'bX;
end 
// expected col2[ 4 ]
initial
begin
	col2_expected[4] = 1'bX;
end 
// expected col2[ 3 ]
initial
begin
	col2_expected[3] = 1'bX;
end 
// expected col2[ 2 ]
initial
begin
	col2_expected[2] = 1'bX;
end 
// expected col2[ 1 ]
initial
begin
	col2_expected[1] = 1'bX;
end 
// expected col2[ 0 ]
initial
begin
	col2_expected[0] = 1'bX;
end 
// expected row_s[ 7 ]
initial
begin
	row_s_expected[7] = 1'bX;
end 
// expected row_s[ 6 ]
initial
begin
	row_s_expected[6] = 1'bX;
end 
// expected row_s[ 5 ]
initial
begin
	row_s_expected[5] = 1'bX;
end 
// expected row_s[ 4 ]
initial
begin
	row_s_expected[4] = 1'bX;
end 
// expected row_s[ 3 ]
initial
begin
	row_s_expected[3] = 1'bX;
end 
// expected row_s[ 2 ]
initial
begin
	row_s_expected[2] = 1'bX;
end 
// expected row_s[ 1 ]
initial
begin
	row_s_expected[1] = 1'bX;
end 
// expected row_s[ 0 ]
initial
begin
	row_s_expected[0] = 1'bX;
end 
// generate trigger
always @(col2_expected or col2 or col_s_expected or col_s or row_s_expected or row_s)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected col2 = %b | expected col_s = %b | expected row_s = %b | ",col2_expected_prev,col_s_expected_prev,row_s_expected_prev);
	$display("| real col2 = %b | real col_s = %b | real row_s = %b | ",col2_prev,col_s_prev,row_s_prev);
`endif
	if (
		( col2_expected_prev[0] !== 1'bx ) && ( col2_prev[0] !== col2_expected_prev[0] )
		&& ((col2_expected_prev[0] !== last_col2_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_expected_prev);
		$display ("     Real value = %b", col2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_exp[0] = col2_expected_prev[0];
	end
	if (
		( col2_expected_prev[1] !== 1'bx ) && ( col2_prev[1] !== col2_expected_prev[1] )
		&& ((col2_expected_prev[1] !== last_col2_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_expected_prev);
		$display ("     Real value = %b", col2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_exp[1] = col2_expected_prev[1];
	end
	if (
		( col2_expected_prev[2] !== 1'bx ) && ( col2_prev[2] !== col2_expected_prev[2] )
		&& ((col2_expected_prev[2] !== last_col2_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_expected_prev);
		$display ("     Real value = %b", col2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_exp[2] = col2_expected_prev[2];
	end
	if (
		( col2_expected_prev[3] !== 1'bx ) && ( col2_prev[3] !== col2_expected_prev[3] )
		&& ((col2_expected_prev[3] !== last_col2_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_expected_prev);
		$display ("     Real value = %b", col2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_exp[3] = col2_expected_prev[3];
	end
	if (
		( col2_expected_prev[4] !== 1'bx ) && ( col2_prev[4] !== col2_expected_prev[4] )
		&& ((col2_expected_prev[4] !== last_col2_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_expected_prev);
		$display ("     Real value = %b", col2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_exp[4] = col2_expected_prev[4];
	end
	if (
		( col2_expected_prev[5] !== 1'bx ) && ( col2_prev[5] !== col2_expected_prev[5] )
		&& ((col2_expected_prev[5] !== last_col2_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_expected_prev);
		$display ("     Real value = %b", col2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_exp[5] = col2_expected_prev[5];
	end
	if (
		( col2_expected_prev[6] !== 1'bx ) && ( col2_prev[6] !== col2_expected_prev[6] )
		&& ((col2_expected_prev[6] !== last_col2_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_expected_prev);
		$display ("     Real value = %b", col2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_exp[6] = col2_expected_prev[6];
	end
	if (
		( col2_expected_prev[7] !== 1'bx ) && ( col2_prev[7] !== col2_expected_prev[7] )
		&& ((col2_expected_prev[7] !== last_col2_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col2_expected_prev);
		$display ("     Real value = %b", col2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col2_exp[7] = col2_expected_prev[7];
	end
	if (
		( col_s_expected_prev[0] !== 1'bx ) && ( col_s_prev[0] !== col_s_expected_prev[0] )
		&& ((col_s_expected_prev[0] !== last_col_s_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s_expected_prev);
		$display ("     Real value = %b", col_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col_s_exp[0] = col_s_expected_prev[0];
	end
	if (
		( col_s_expected_prev[1] !== 1'bx ) && ( col_s_prev[1] !== col_s_expected_prev[1] )
		&& ((col_s_expected_prev[1] !== last_col_s_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s_expected_prev);
		$display ("     Real value = %b", col_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col_s_exp[1] = col_s_expected_prev[1];
	end
	if (
		( col_s_expected_prev[2] !== 1'bx ) && ( col_s_prev[2] !== col_s_expected_prev[2] )
		&& ((col_s_expected_prev[2] !== last_col_s_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s_expected_prev);
		$display ("     Real value = %b", col_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col_s_exp[2] = col_s_expected_prev[2];
	end
	if (
		( col_s_expected_prev[3] !== 1'bx ) && ( col_s_prev[3] !== col_s_expected_prev[3] )
		&& ((col_s_expected_prev[3] !== last_col_s_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s_expected_prev);
		$display ("     Real value = %b", col_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col_s_exp[3] = col_s_expected_prev[3];
	end
	if (
		( col_s_expected_prev[4] !== 1'bx ) && ( col_s_prev[4] !== col_s_expected_prev[4] )
		&& ((col_s_expected_prev[4] !== last_col_s_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s_expected_prev);
		$display ("     Real value = %b", col_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col_s_exp[4] = col_s_expected_prev[4];
	end
	if (
		( col_s_expected_prev[5] !== 1'bx ) && ( col_s_prev[5] !== col_s_expected_prev[5] )
		&& ((col_s_expected_prev[5] !== last_col_s_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s_expected_prev);
		$display ("     Real value = %b", col_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col_s_exp[5] = col_s_expected_prev[5];
	end
	if (
		( col_s_expected_prev[6] !== 1'bx ) && ( col_s_prev[6] !== col_s_expected_prev[6] )
		&& ((col_s_expected_prev[6] !== last_col_s_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s_expected_prev);
		$display ("     Real value = %b", col_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col_s_exp[6] = col_s_expected_prev[6];
	end
	if (
		( col_s_expected_prev[7] !== 1'bx ) && ( col_s_prev[7] !== col_s_expected_prev[7] )
		&& ((col_s_expected_prev[7] !== last_col_s_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col_s[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_s_expected_prev);
		$display ("     Real value = %b", col_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col_s_exp[7] = col_s_expected_prev[7];
	end
	if (
		( row_s_expected_prev[0] !== 1'bx ) && ( row_s_prev[0] !== row_s_expected_prev[0] )
		&& ((row_s_expected_prev[0] !== last_row_s_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s_expected_prev);
		$display ("     Real value = %b", row_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_row_s_exp[0] = row_s_expected_prev[0];
	end
	if (
		( row_s_expected_prev[1] !== 1'bx ) && ( row_s_prev[1] !== row_s_expected_prev[1] )
		&& ((row_s_expected_prev[1] !== last_row_s_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s_expected_prev);
		$display ("     Real value = %b", row_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_row_s_exp[1] = row_s_expected_prev[1];
	end
	if (
		( row_s_expected_prev[2] !== 1'bx ) && ( row_s_prev[2] !== row_s_expected_prev[2] )
		&& ((row_s_expected_prev[2] !== last_row_s_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s_expected_prev);
		$display ("     Real value = %b", row_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_row_s_exp[2] = row_s_expected_prev[2];
	end
	if (
		( row_s_expected_prev[3] !== 1'bx ) && ( row_s_prev[3] !== row_s_expected_prev[3] )
		&& ((row_s_expected_prev[3] !== last_row_s_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s_expected_prev);
		$display ("     Real value = %b", row_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_row_s_exp[3] = row_s_expected_prev[3];
	end
	if (
		( row_s_expected_prev[4] !== 1'bx ) && ( row_s_prev[4] !== row_s_expected_prev[4] )
		&& ((row_s_expected_prev[4] !== last_row_s_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s_expected_prev);
		$display ("     Real value = %b", row_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_row_s_exp[4] = row_s_expected_prev[4];
	end
	if (
		( row_s_expected_prev[5] !== 1'bx ) && ( row_s_prev[5] !== row_s_expected_prev[5] )
		&& ((row_s_expected_prev[5] !== last_row_s_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s_expected_prev);
		$display ("     Real value = %b", row_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_row_s_exp[5] = row_s_expected_prev[5];
	end
	if (
		( row_s_expected_prev[6] !== 1'bx ) && ( row_s_prev[6] !== row_s_expected_prev[6] )
		&& ((row_s_expected_prev[6] !== last_row_s_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s_expected_prev);
		$display ("     Real value = %b", row_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_row_s_exp[6] = row_s_expected_prev[6];
	end
	if (
		( row_s_expected_prev[7] !== 1'bx ) && ( row_s_prev[7] !== row_s_expected_prev[7] )
		&& ((row_s_expected_prev[7] !== last_row_s_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row_s[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_s_expected_prev);
		$display ("     Real value = %b", row_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_row_s_exp[7] = row_s_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module matrixFace_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg gameStatus;
reg TFS;
// wires                                               
wire [0:7] col2;
wire [0:7] col_s;
wire [0:7] row_s;

wire sampler;                             

// assign statements (if any)                          
matrixFace i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.col2(col2),
	.col_s(col_s),
	.gameStatus(gameStatus),
	.row_s(row_s),
	.TFS(TFS)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// TFS
initial
begin
	repeat(31)
	begin
		TFS = 1'b0;
		TFS = #16000 1'b1;
		# 16000;
	end
	TFS = 1'b0;
end 

// gameStatus
initial
begin
	repeat(15)
	begin
		gameStatus = 1'b0;
		gameStatus = #32000 1'b1;
		# 32000;
	end
	gameStatus = 1'b0;
	gameStatus = #32000 1'b1;
end 

matrixFace_vlg_sample_tst tb_sample (
	.clk(clk),
	.gameStatus(gameStatus),
	.TFS(TFS),
	.sampler_tx(sampler)
);

matrixFace_vlg_check_tst tb_out(
	.col2(col2),
	.col_s(col_s),
	.row_s(row_s),
	.sampler_rx(sampler)
);
endmodule


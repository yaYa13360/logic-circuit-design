// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2021 16:00:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CompareNum
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CompareNum_vlg_sample_tst(
	enter,
	g,
	reset,
	u,
	sampler_tx
);
input  enter;
input [0:7] g;
input  reset;
input [0:7] u;
output sampler_tx;

reg sample;
time current_time;
always @(enter or g or reset or u)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CompareNum_vlg_check_tst (
	TFS,
	sampler_rx
);
input [0:1] TFS;
input sampler_rx;

reg [0:1] TFS_expected;

reg [0:1] TFS_prev;

reg [0:1] TFS_expected_prev;

reg [0:1] last_TFS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	TFS_prev = TFS;
end

// update expected /o prevs

always @(trigger)
begin
	TFS_expected_prev = TFS_expected;
end


// expected TFS[ 1 ]
initial
begin
	TFS_expected[1] = 1'bX;
end 
// expected TFS[ 0 ]
initial
begin
	TFS_expected[0] = 1'bX;
end 
// generate trigger
always @(TFS_expected or TFS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected TFS = %b | ",TFS_expected_prev);
	$display("| real TFS = %b | ",TFS_prev);
`endif
	if (
		( TFS_expected_prev[0] !== 1'bx ) && ( TFS_prev[0] !== TFS_expected_prev[0] )
		&& ((TFS_expected_prev[0] !== last_TFS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TFS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TFS_expected_prev);
		$display ("     Real value = %b", TFS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_TFS_exp[0] = TFS_expected_prev[0];
	end
	if (
		( TFS_expected_prev[1] !== 1'bx ) && ( TFS_prev[1] !== TFS_expected_prev[1] )
		&& ((TFS_expected_prev[1] !== last_TFS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TFS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TFS_expected_prev);
		$display ("     Real value = %b", TFS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_TFS_exp[1] = TFS_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CompareNum_vlg_vec_tst();
// constants                                           
// general purpose registers
reg enter;
reg [0:7] g;
reg reset;
reg [0:7] u;
// wires                                               
wire [0:1] TFS;

wire sampler;                             

// assign statements (if any)                          
CompareNum i1 (
// port map - connection between master ports and signals/registers   
	.enter(enter),
	.g(g),
	.reset(reset),
	.TFS(TFS),
	.u(u)
);

// enter
always
begin
	enter = 1'b0;
	enter = #1000 1'b1;
	#1000;
end 

// reset
always
begin
	reset = 1'b0;
	reset = #1000 1'b1;
	#1000;
end 
// u[ 7 ]
initial
begin
	u[7] = 1'b0;
end 
// u[ 6 ]
initial
begin
	u[6] = 1'b0;
end 
// u[ 5 ]
initial
begin
	u[5] = 1'b0;
end 
// u[ 4 ]
initial
begin
	u[4] = 1'b0;
end 
// u[ 3 ]
initial
begin
	u[3] = 1'b1;
end 
// u[ 2 ]
initial
begin
	u[2] = 1'b0;
end 
// u[ 1 ]
initial
begin
	u[1] = 1'b1;
end 
// u[ 0 ]
initial
begin
	u[0] = 1'b0;
end 
// g[ 7 ]
always
begin
	g[7] = 1'b0;
	g[7] = #2000 1'b1;
	# 2000;
	repeat(248)
	begin
		g[7] = 1'b0;
		g[7] = #2000 1'b1;
		# 2000;
	end
	g[7] = 1'b0;
	g[7] = #2000 1'b1;
	#2000;
end 
// g[ 6 ]
always
begin
	g[6] = 1'b0;
	g[6] = #4000 1'b1;
	# 4000;
	repeat(123)
	begin
		g[6] = 1'b0;
		g[6] = #4000 1'b1;
		# 4000;
	end
	g[6] = 1'b0;
	g[6] = #4000 1'b1;
	#4000;
end 
// g[ 5 ]
always
begin
	g[5] = 1'b0;
	g[5] = #8000 1'b1;
	# 8000;
	repeat(61)
	begin
		g[5] = 1'b0;
		g[5] = #8000 1'b1;
		# 8000;
	end
	g[5] = 1'b0;
	#8000;
end 
// g[ 4 ]
always
begin
	g[4] = 1'b0;
	g[4] = #16000 1'b1;
	# 16000;
	repeat(30)
	begin
		g[4] = 1'b0;
		g[4] = #16000 1'b1;
		# 16000;
	end
	g[4] = 1'b0;
	#8000;
end 
// g[ 3 ]
always
begin
	g[3] = 1'b0;
	g[3] = #32000 1'b1;
	# 32000;
	repeat(14)
	begin
		g[3] = 1'b0;
		g[3] = #32000 1'b1;
		# 32000;
	end
	g[3] = 1'b0;
	g[3] = #32000 1'b1;
	#8000;
end 
// g[ 2 ]
always
begin
	g[2] = 1'b0;
	g[2] = #64000 1'b1;
	# 64000;
	repeat(6)
	begin
		g[2] = 1'b0;
		g[2] = #64000 1'b1;
		# 64000;
	end
	g[2] = 1'b0;
	g[2] = #64000 1'b1;
	#40000;
end 
// g[ 1 ]
always
begin
	g[1] = 1'b0;
	g[1] = #128000 1'b1;
	# 128000;
	repeat(2)
	begin
		g[1] = 1'b0;
		g[1] = #128000 1'b1;
		# 128000;
	end
	g[1] = 1'b0;
	g[1] = #128000 1'b1;
	#104000;
end 
// g[ 0 ]
always
begin
	g[0] = 1'b0;
	g[0] = #256000 1'b1;
	g[0] = #256000 1'b0;
	g[0] = #256000 1'b1;
	#232000;
end 

CompareNum_vlg_sample_tst tb_sample (
	.enter(enter),
	.g(g),
	.reset(reset),
	.u(u),
	.sampler_tx(sampler)
);

CompareNum_vlg_check_tst tb_out(
	.TFS(TFS),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2021 22:00:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    countLife
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module countLife_vlg_sample_tst(
	start,
	touch,
	sampler_tx
);
input  start;
input  touch;
output sampler_tx;

reg sample;
time current_time;
always @(start or touch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module countLife_vlg_check_tst (
	gameStatus,
	led,
	sampler_rx
);
input  gameStatus;
input [0:3] led;
input sampler_rx;

reg  gameStatus_expected;
reg [0:3] led_expected;

reg  gameStatus_prev;
reg [0:3] led_prev;

reg  gameStatus_expected_prev;
reg [0:3] led_expected_prev;

reg  last_gameStatus_exp;
reg [0:3] last_led_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	gameStatus_prev = gameStatus;
	led_prev = led;
end

// update expected /o prevs

always @(trigger)
begin
	gameStatus_expected_prev = gameStatus_expected;
	led_expected_prev = led_expected;
end


// expected led[ 3 ]
initial
begin
	led_expected[3] = 1'bX;
end 
// expected led[ 2 ]
initial
begin
	led_expected[2] = 1'bX;
end 
// expected led[ 1 ]
initial
begin
	led_expected[1] = 1'bX;
end 
// expected led[ 0 ]
initial
begin
	led_expected[0] = 1'bX;
end 

// expected gameStatus
initial
begin
	gameStatus_expected = 1'bX;
end 
// generate trigger
always @(gameStatus_expected or gameStatus or led_expected or led)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected gameStatus = %b | expected led = %b | ",gameStatus_expected_prev,led_expected_prev);
	$display("| real gameStatus = %b | real led = %b | ",gameStatus_prev,led_prev);
`endif
	if (
		( gameStatus_expected_prev !== 1'bx ) && ( gameStatus_prev !== gameStatus_expected_prev )
		&& ((gameStatus_expected_prev !== last_gameStatus_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gameStatus :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gameStatus_expected_prev);
		$display ("     Real value = %b", gameStatus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gameStatus_exp = gameStatus_expected_prev;
	end
	if (
		( led_expected_prev[0] !== 1'bx ) && ( led_prev[0] !== led_expected_prev[0] )
		&& ((led_expected_prev[0] !== last_led_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[0] = led_expected_prev[0];
	end
	if (
		( led_expected_prev[1] !== 1'bx ) && ( led_prev[1] !== led_expected_prev[1] )
		&& ((led_expected_prev[1] !== last_led_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[1] = led_expected_prev[1];
	end
	if (
		( led_expected_prev[2] !== 1'bx ) && ( led_prev[2] !== led_expected_prev[2] )
		&& ((led_expected_prev[2] !== last_led_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[2] = led_expected_prev[2];
	end
	if (
		( led_expected_prev[3] !== 1'bx ) && ( led_prev[3] !== led_expected_prev[3] )
		&& ((led_expected_prev[3] !== last_led_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_exp[3] = led_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module countLife_vlg_vec_tst();
// constants                                           
// general purpose registers
reg start;
reg touch;
// wires                                               
wire gameStatus;
wire [0:3] led;

wire sampler;                             

// assign statements (if any)                          
countLife i1 (
// port map - connection between master ports and signals/registers   
	.gameStatus(gameStatus),
	.led(led),
	.start(start),
	.touch(touch)
);

// start
initial
begin
	start = 1'b1;
	# 20000;
	repeat(24)
	begin
		start = 1'b0;
		start = #20000 1'b1;
		# 20000;
	end
	start = 1'b0;
end 

// touch
initial
begin
	repeat(12)
	begin
		touch = 1'b0;
		touch = #40000 1'b1;
		# 40000;
	end
	touch = 1'b0;
end 

countLife_vlg_sample_tst tb_sample (
	.start(start),
	.touch(touch),
	.sampler_tx(sampler)
);

countLife_vlg_check_tst tb_out(
	.gameStatus(gameStatus),
	.led(led),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2021 20:48:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projectFull
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projectFull_vlg_sample_tst(
	enter,
	g0,
	g1,
	g2,
	g3,
	g4,
	g5,
	g6,
	g7,
	mad0,
	mad1,
	mad2,
	mad3,
	mat0,
	mat1,
	mat2,
	mat3,
	mid0,
	mid1,
	mid2,
	mid3,
	mit0,
	mit1,
	mit2,
	mit3,
	restart,
	start,
	u0,
	u1,
	u2,
	u3,
	u4,
	u5,
	u6,
	u7,
	sampler_tx
);
input  enter;
input  g0;
input  g1;
input  g2;
input  g3;
input  g4;
input  g5;
input  g6;
input  g7;
input  mad0;
input  mad1;
input  mad2;
input  mad3;
input  mat0;
input  mat1;
input  mat2;
input  mat3;
input  mid0;
input  mid1;
input  mid2;
input  mid3;
input  mit0;
input  mit1;
input  mit2;
input  mit3;
input  restart;
input  start;
input  u0;
input  u1;
input  u2;
input  u3;
input  u4;
input  u5;
input  u6;
input  u7;
output sampler_tx;

reg sample;
time current_time;
always @(enter or g0 or g1 or g2 or g3 or g4 or g5 or g6 or g7 or mad0 or mad1 or mad2 or mad3 or mat0 or mat1 or mat2 or mat3 or mid0 or mid1 or mid2 or mid3 or mit0 or mit1 or mit2 or mit3 or restart or start or u0 or u1 or u2 or u3 or u4 or u5 or u6 or u7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projectFull_vlg_check_tst (
	gamest,
	id0,
	id1,
	id2,
	id3,
	it0,
	it1,
	it2,
	it3,
	L1,
	L2,
	L3,
	L4,
	md0,
	md1,
	md2,
	md3,
	mt0,
	mt1,
	mt2,
	mt3,
	TEST,
	TFS1,
	sampler_rx
);
input  gamest;
input  id0;
input  id1;
input  id2;
input  id3;
input  it0;
input  it1;
input  it2;
input  it3;
input  L1;
input  L2;
input  L3;
input  L4;
input  md0;
input  md1;
input  md2;
input  md3;
input  mt0;
input  mt1;
input  mt2;
input  mt3;
input  TEST;
input  TFS1;
input sampler_rx;

reg  gamest_expected;
reg  id0_expected;
reg  id1_expected;
reg  id2_expected;
reg  id3_expected;
reg  it0_expected;
reg  it1_expected;
reg  it2_expected;
reg  it3_expected;
reg  L1_expected;
reg  L2_expected;
reg  L3_expected;
reg  L4_expected;
reg  md0_expected;
reg  md1_expected;
reg  md2_expected;
reg  md3_expected;
reg  mt0_expected;
reg  mt1_expected;
reg  mt2_expected;
reg  mt3_expected;
reg  TEST_expected;
reg  TFS1_expected;

reg  gamest_prev;
reg  id0_prev;
reg  id1_prev;
reg  id2_prev;
reg  id3_prev;
reg  it0_prev;
reg  it1_prev;
reg  it2_prev;
reg  it3_prev;
reg  L1_prev;
reg  L2_prev;
reg  L3_prev;
reg  L4_prev;
reg  md0_prev;
reg  md1_prev;
reg  md2_prev;
reg  md3_prev;
reg  mt0_prev;
reg  mt1_prev;
reg  mt2_prev;
reg  mt3_prev;
reg  TEST_prev;
reg  TFS1_prev;

reg  gamest_expected_prev;
reg  id0_expected_prev;
reg  id1_expected_prev;
reg  id2_expected_prev;
reg  id3_expected_prev;
reg  it0_expected_prev;
reg  it1_expected_prev;
reg  it2_expected_prev;
reg  it3_expected_prev;
reg  L1_expected_prev;
reg  L2_expected_prev;
reg  L3_expected_prev;
reg  L4_expected_prev;
reg  md0_expected_prev;
reg  md1_expected_prev;
reg  md2_expected_prev;
reg  md3_expected_prev;
reg  mt0_expected_prev;
reg  mt1_expected_prev;
reg  mt2_expected_prev;
reg  mt3_expected_prev;
reg  TEST_expected_prev;
reg  TFS1_expected_prev;

reg  last_gamest_exp;
reg  last_id0_exp;
reg  last_id1_exp;
reg  last_id2_exp;
reg  last_id3_exp;
reg  last_it0_exp;
reg  last_it1_exp;
reg  last_it2_exp;
reg  last_it3_exp;
reg  last_L1_exp;
reg  last_L2_exp;
reg  last_L3_exp;
reg  last_L4_exp;
reg  last_md0_exp;
reg  last_md1_exp;
reg  last_md2_exp;
reg  last_md3_exp;
reg  last_mt0_exp;
reg  last_mt1_exp;
reg  last_mt2_exp;
reg  last_mt3_exp;
reg  last_TEST_exp;
reg  last_TFS1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:23] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 23'b1;
end

// update real /o prevs

always @(trigger)
begin
	gamest_prev = gamest;
	id0_prev = id0;
	id1_prev = id1;
	id2_prev = id2;
	id3_prev = id3;
	it0_prev = it0;
	it1_prev = it1;
	it2_prev = it2;
	it3_prev = it3;
	L1_prev = L1;
	L2_prev = L2;
	L3_prev = L3;
	L4_prev = L4;
	md0_prev = md0;
	md1_prev = md1;
	md2_prev = md2;
	md3_prev = md3;
	mt0_prev = mt0;
	mt1_prev = mt1;
	mt2_prev = mt2;
	mt3_prev = mt3;
	TEST_prev = TEST;
	TFS1_prev = TFS1;
end

// update expected /o prevs

always @(trigger)
begin
	gamest_expected_prev = gamest_expected;
	id0_expected_prev = id0_expected;
	id1_expected_prev = id1_expected;
	id2_expected_prev = id2_expected;
	id3_expected_prev = id3_expected;
	it0_expected_prev = it0_expected;
	it1_expected_prev = it1_expected;
	it2_expected_prev = it2_expected;
	it3_expected_prev = it3_expected;
	L1_expected_prev = L1_expected;
	L2_expected_prev = L2_expected;
	L3_expected_prev = L3_expected;
	L4_expected_prev = L4_expected;
	md0_expected_prev = md0_expected;
	md1_expected_prev = md1_expected;
	md2_expected_prev = md2_expected;
	md3_expected_prev = md3_expected;
	mt0_expected_prev = mt0_expected;
	mt1_expected_prev = mt1_expected;
	mt2_expected_prev = mt2_expected;
	mt3_expected_prev = mt3_expected;
	TEST_expected_prev = TEST_expected;
	TFS1_expected_prev = TFS1_expected;
end



// expected TFS1
initial
begin
	TFS1_expected = 1'bX;
end 

// expected gamest
initial
begin
	gamest_expected = 1'bX;
end 

// expected L1
initial
begin
	L1_expected = 1'bX;
end 

// expected L2
initial
begin
	L2_expected = 1'bX;
end 

// expected L3
initial
begin
	L3_expected = 1'bX;
end 

// expected L4
initial
begin
	L4_expected = 1'bX;
end 

// expected mt0
initial
begin
	mt0_expected = 1'bX;
end 

// expected mt1
initial
begin
	mt1_expected = 1'bX;
end 

// expected mt2
initial
begin
	mt2_expected = 1'bX;
end 

// expected mt3
initial
begin
	mt3_expected = 1'bX;
end 

// expected md0
initial
begin
	md0_expected = 1'bX;
end 

// expected md1
initial
begin
	md1_expected = 1'bX;
end 

// expected md2
initial
begin
	md2_expected = 1'bX;
end 

// expected md3
initial
begin
	md3_expected = 1'bX;
end 

// expected it0
initial
begin
	it0_expected = 1'bX;
end 

// expected it1
initial
begin
	it1_expected = 1'bX;
end 

// expected it2
initial
begin
	it2_expected = 1'bX;
end 

// expected it3
initial
begin
	it3_expected = 1'bX;
end 

// expected id0
initial
begin
	id0_expected = 1'bX;
end 

// expected id1
initial
begin
	id1_expected = 1'bX;
end 

// expected id2
initial
begin
	id2_expected = 1'bX;
end 

// expected id3
initial
begin
	id3_expected = 1'bX;
end 

// expected TEST
initial
begin
	TEST_expected = 1'bX;
end 
// generate trigger
always @(gamest_expected or gamest or id0_expected or id0 or id1_expected or id1 or id2_expected or id2 or id3_expected or id3 or it0_expected or it0 or it1_expected or it1 or it2_expected or it2 or it3_expected or it3 or L1_expected or L1 or L2_expected or L2 or L3_expected or L3 or L4_expected or L4 or md0_expected or md0 or md1_expected or md1 or md2_expected or md2 or md3_expected or md3 or mt0_expected or mt0 or mt1_expected or mt1 or mt2_expected or mt2 or mt3_expected or mt3 or TEST_expected or TEST or TFS1_expected or TFS1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected gamest = %b | expected id0 = %b | expected id1 = %b | expected id2 = %b | expected id3 = %b | expected it0 = %b | expected it1 = %b | expected it2 = %b | expected it3 = %b | expected L1 = %b | expected L2 = %b | expected L3 = %b | expected L4 = %b | expected md0 = %b | expected md1 = %b | expected md2 = %b | expected md3 = %b | expected mt0 = %b | expected mt1 = %b | expected mt2 = %b | expected mt3 = %b | expected TEST = %b | expected TFS1 = %b | ",gamest_expected_prev,id0_expected_prev,id1_expected_prev,id2_expected_prev,id3_expected_prev,it0_expected_prev,it1_expected_prev,it2_expected_prev,it3_expected_prev,L1_expected_prev,L2_expected_prev,L3_expected_prev,L4_expected_prev,md0_expected_prev,md1_expected_prev,md2_expected_prev,md3_expected_prev,mt0_expected_prev,mt1_expected_prev,mt2_expected_prev,mt3_expected_prev,TEST_expected_prev,TFS1_expected_prev);
	$display("| real gamest = %b | real id0 = %b | real id1 = %b | real id2 = %b | real id3 = %b | real it0 = %b | real it1 = %b | real it2 = %b | real it3 = %b | real L1 = %b | real L2 = %b | real L3 = %b | real L4 = %b | real md0 = %b | real md1 = %b | real md2 = %b | real md3 = %b | real mt0 = %b | real mt1 = %b | real mt2 = %b | real mt3 = %b | real TEST = %b | real TFS1 = %b | ",gamest_prev,id0_prev,id1_prev,id2_prev,id3_prev,it0_prev,it1_prev,it2_prev,it3_prev,L1_prev,L2_prev,L3_prev,L4_prev,md0_prev,md1_prev,md2_prev,md3_prev,mt0_prev,mt1_prev,mt2_prev,mt3_prev,TEST_prev,TFS1_prev);
`endif
	if (
		( gamest_expected_prev !== 1'bx ) && ( gamest_prev !== gamest_expected_prev )
		&& ((gamest_expected_prev !== last_gamest_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gamest :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gamest_expected_prev);
		$display ("     Real value = %b", gamest_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gamest_exp = gamest_expected_prev;
	end
	if (
		( id0_expected_prev !== 1'bx ) && ( id0_prev !== id0_expected_prev )
		&& ((id0_expected_prev !== last_id0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id0_expected_prev);
		$display ("     Real value = %b", id0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_id0_exp = id0_expected_prev;
	end
	if (
		( id1_expected_prev !== 1'bx ) && ( id1_prev !== id1_expected_prev )
		&& ((id1_expected_prev !== last_id1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id1_expected_prev);
		$display ("     Real value = %b", id1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_id1_exp = id1_expected_prev;
	end
	if (
		( id2_expected_prev !== 1'bx ) && ( id2_prev !== id2_expected_prev )
		&& ((id2_expected_prev !== last_id2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id2_expected_prev);
		$display ("     Real value = %b", id2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_id2_exp = id2_expected_prev;
	end
	if (
		( id3_expected_prev !== 1'bx ) && ( id3_prev !== id3_expected_prev )
		&& ((id3_expected_prev !== last_id3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id3_expected_prev);
		$display ("     Real value = %b", id3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_id3_exp = id3_expected_prev;
	end
	if (
		( it0_expected_prev !== 1'bx ) && ( it0_prev !== it0_expected_prev )
		&& ((it0_expected_prev !== last_it0_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port it0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", it0_expected_prev);
		$display ("     Real value = %b", it0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_it0_exp = it0_expected_prev;
	end
	if (
		( it1_expected_prev !== 1'bx ) && ( it1_prev !== it1_expected_prev )
		&& ((it1_expected_prev !== last_it1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port it1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", it1_expected_prev);
		$display ("     Real value = %b", it1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_it1_exp = it1_expected_prev;
	end
	if (
		( it2_expected_prev !== 1'bx ) && ( it2_prev !== it2_expected_prev )
		&& ((it2_expected_prev !== last_it2_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port it2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", it2_expected_prev);
		$display ("     Real value = %b", it2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_it2_exp = it2_expected_prev;
	end
	if (
		( it3_expected_prev !== 1'bx ) && ( it3_prev !== it3_expected_prev )
		&& ((it3_expected_prev !== last_it3_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port it3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", it3_expected_prev);
		$display ("     Real value = %b", it3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_it3_exp = it3_expected_prev;
	end
	if (
		( L1_expected_prev !== 1'bx ) && ( L1_prev !== L1_expected_prev )
		&& ((L1_expected_prev !== last_L1_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_L1_exp = L1_expected_prev;
	end
	if (
		( L2_expected_prev !== 1'bx ) && ( L2_prev !== L2_expected_prev )
		&& ((L2_expected_prev !== last_L2_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_L2_exp = L2_expected_prev;
	end
	if (
		( L3_expected_prev !== 1'bx ) && ( L3_prev !== L3_expected_prev )
		&& ((L3_expected_prev !== last_L3_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_L3_exp = L3_expected_prev;
	end
	if (
		( L4_expected_prev !== 1'bx ) && ( L4_prev !== L4_expected_prev )
		&& ((L4_expected_prev !== last_L4_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_L4_exp = L4_expected_prev;
	end
	if (
		( md0_expected_prev !== 1'bx ) && ( md0_prev !== md0_expected_prev )
		&& ((md0_expected_prev !== last_md0_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port md0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", md0_expected_prev);
		$display ("     Real value = %b", md0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_md0_exp = md0_expected_prev;
	end
	if (
		( md1_expected_prev !== 1'bx ) && ( md1_prev !== md1_expected_prev )
		&& ((md1_expected_prev !== last_md1_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port md1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", md1_expected_prev);
		$display ("     Real value = %b", md1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_md1_exp = md1_expected_prev;
	end
	if (
		( md2_expected_prev !== 1'bx ) && ( md2_prev !== md2_expected_prev )
		&& ((md2_expected_prev !== last_md2_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port md2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", md2_expected_prev);
		$display ("     Real value = %b", md2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_md2_exp = md2_expected_prev;
	end
	if (
		( md3_expected_prev !== 1'bx ) && ( md3_prev !== md3_expected_prev )
		&& ((md3_expected_prev !== last_md3_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port md3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", md3_expected_prev);
		$display ("     Real value = %b", md3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_md3_exp = md3_expected_prev;
	end
	if (
		( mt0_expected_prev !== 1'bx ) && ( mt0_prev !== mt0_expected_prev )
		&& ((mt0_expected_prev !== last_mt0_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mt0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mt0_expected_prev);
		$display ("     Real value = %b", mt0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_mt0_exp = mt0_expected_prev;
	end
	if (
		( mt1_expected_prev !== 1'bx ) && ( mt1_prev !== mt1_expected_prev )
		&& ((mt1_expected_prev !== last_mt1_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mt1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mt1_expected_prev);
		$display ("     Real value = %b", mt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_mt1_exp = mt1_expected_prev;
	end
	if (
		( mt2_expected_prev !== 1'bx ) && ( mt2_prev !== mt2_expected_prev )
		&& ((mt2_expected_prev !== last_mt2_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mt2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mt2_expected_prev);
		$display ("     Real value = %b", mt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_mt2_exp = mt2_expected_prev;
	end
	if (
		( mt3_expected_prev !== 1'bx ) && ( mt3_prev !== mt3_expected_prev )
		&& ((mt3_expected_prev !== last_mt3_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mt3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mt3_expected_prev);
		$display ("     Real value = %b", mt3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_mt3_exp = mt3_expected_prev;
	end
	if (
		( TEST_expected_prev !== 1'bx ) && ( TEST_prev !== TEST_expected_prev )
		&& ((TEST_expected_prev !== last_TEST_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TEST :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TEST_expected_prev);
		$display ("     Real value = %b", TEST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_TEST_exp = TEST_expected_prev;
	end
	if (
		( TFS1_expected_prev !== 1'bx ) && ( TFS1_prev !== TFS1_expected_prev )
		&& ((TFS1_expected_prev !== last_TFS1_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TFS1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TFS1_expected_prev);
		$display ("     Real value = %b", TFS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_TFS1_exp = TFS1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projectFull_vlg_vec_tst();
// constants                                           
// general purpose registers
reg enter;
reg g0;
reg g1;
reg g2;
reg g3;
reg g4;
reg g5;
reg g6;
reg g7;
reg mad0;
reg mad1;
reg mad2;
reg mad3;
reg mat0;
reg mat1;
reg mat2;
reg mat3;
reg mid0;
reg mid1;
reg mid2;
reg mid3;
reg mit0;
reg mit1;
reg mit2;
reg mit3;
reg restart;
reg start;
reg u0;
reg u1;
reg u2;
reg u3;
reg u4;
reg u5;
reg u6;
reg u7;
// wires                                               
wire gamest;
wire id0;
wire id1;
wire id2;
wire id3;
wire it0;
wire it1;
wire it2;
wire it3;
wire L1;
wire L2;
wire L3;
wire L4;
wire md0;
wire md1;
wire md2;
wire md3;
wire mt0;
wire mt1;
wire mt2;
wire mt3;
wire TEST;
wire TFS1;

wire sampler;                             

// assign statements (if any)                          
projectFull i1 (
// port map - connection between master ports and signals/registers   
	.enter(enter),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.g5(g5),
	.g6(g6),
	.g7(g7),
	.gamest(gamest),
	.id0(id0),
	.id1(id1),
	.id2(id2),
	.id3(id3),
	.it0(it0),
	.it1(it1),
	.it2(it2),
	.it3(it3),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.mad0(mad0),
	.mad1(mad1),
	.mad2(mad2),
	.mad3(mad3),
	.mat0(mat0),
	.mat1(mat1),
	.mat2(mat2),
	.mat3(mat3),
	.md0(md0),
	.md1(md1),
	.md2(md2),
	.md3(md3),
	.mid0(mid0),
	.mid1(mid1),
	.mid2(mid2),
	.mid3(mid3),
	.mit0(mit0),
	.mit1(mit1),
	.mit2(mit2),
	.mit3(mit3),
	.mt0(mt0),
	.mt1(mt1),
	.mt2(mt2),
	.mt3(mt3),
	.restart(restart),
	.start(start),
	.TEST(TEST),
	.TFS1(TFS1),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.u3(u3),
	.u4(u4),
	.u5(u5),
	.u6(u6),
	.u7(u7)
);

// enter
always
begin
	enter = 1'b0;
	enter = #1000 1'b1;
	#1000;
end 

// restart
always
begin
	restart = 1'b0;
	restart = #1000 1'b1;
	#1000;
end 

// start
initial
begin
	start = 1'b0;
end 

// mat0
initial
begin
	mat0 = 1'b0;
end 

// mat1
initial
begin
	mat1 = 1'b0;
end 

// mat2
initial
begin
	mat2 = 1'b0;
end 

// mat3
initial
begin
	mat3 = 1'b0;
end 

// mad0
initial
begin
	mad0 = 1'b0;
end 

// mad1
initial
begin
	mad1 = 1'b0;
end 

// mad2
initial
begin
	mad2 = 1'b0;
end 

// mad3
initial
begin
	mad3 = 1'b0;
end 

// mit0
initial
begin
	mit0 = 1'b0;
end 

// mit1
initial
begin
	mit1 = 1'b0;
end 

// mit2
initial
begin
	mit2 = 1'b0;
end 

// mit3
initial
begin
	mit3 = 1'b0;
end 

// mid0
initial
begin
	mid0 = 1'b0;
end 

// mid1
initial
begin
	mid1 = 1'b0;
end 

// mid2
initial
begin
	mid2 = 1'b0;
end 

// mid3
initial
begin
	mid3 = 1'b0;
end 

// u0
initial
begin
	u0 = 1'b0;
	u0 = #256000 1'b1;
	u0 = #256000 1'b0;
	u0 = #256000 1'b1;
end 

// u1
initial
begin
	repeat(3)
	begin
		u1 = 1'b0;
		u1 = #128000 1'b1;
		# 128000;
	end
	u1 = 1'b0;
	u1 = #128000 1'b1;
end 

// u2
initial
begin
	repeat(7)
	begin
		u2 = 1'b0;
		u2 = #64000 1'b1;
		# 64000;
	end
	u2 = 1'b0;
	u2 = #64000 1'b1;
end 

// u3
initial
begin
	repeat(15)
	begin
		u3 = 1'b0;
		u3 = #32000 1'b1;
		# 32000;
	end
	u3 = 1'b0;
	u3 = #32000 1'b1;
end 

// u4
initial
begin
	repeat(31)
	begin
		u4 = 1'b0;
		u4 = #16000 1'b1;
		# 16000;
	end
	u4 = 1'b0;
end 

// u5
initial
begin
	repeat(62)
	begin
		u5 = 1'b0;
		u5 = #8000 1'b1;
		# 8000;
	end
	u5 = 1'b0;
end 

// u6
always
begin
	u6 = 1'b0;
	u6 = #4000 1'b1;
	#4000;
end 

// u7
always
begin
	u7 = 1'b0;
	u7 = #2000 1'b1;
	#2000;
end 

// g0
initial
begin
	g0 = 1'b0;
end 

// g1
initial
begin
	g1 = 1'b1;
end 

// g2
initial
begin
	g2 = 1'b0;
end 

// g3
initial
begin
	g3 = 1'b1;
end 

// g4
initial
begin
	g4 = 1'b0;
end 

// g5
initial
begin
	g5 = 1'b0;
end 

// g6
initial
begin
	g6 = 1'b0;
end 

// g7
initial
begin
	g7 = 1'b0;
end 

projectFull_vlg_sample_tst tb_sample (
	.enter(enter),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.g5(g5),
	.g6(g6),
	.g7(g7),
	.mad0(mad0),
	.mad1(mad1),
	.mad2(mad2),
	.mad3(mad3),
	.mat0(mat0),
	.mat1(mat1),
	.mat2(mat2),
	.mat3(mat3),
	.mid0(mid0),
	.mid1(mid1),
	.mid2(mid2),
	.mid3(mid3),
	.mit0(mit0),
	.mit1(mit1),
	.mit2(mit2),
	.mit3(mit3),
	.restart(restart),
	.start(start),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.u3(u3),
	.u4(u4),
	.u5(u5),
	.u6(u6),
	.u7(u7),
	.sampler_tx(sampler)
);

projectFull_vlg_check_tst tb_out(
	.gamest(gamest),
	.id0(id0),
	.id1(id1),
	.id2(id2),
	.id3(id3),
	.it0(it0),
	.it1(it1),
	.it2(it2),
	.it3(it3),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.md0(md0),
	.md1(md1),
	.md2(md2),
	.md3(md3),
	.mt0(mt0),
	.mt1(mt1),
	.mt2(mt2),
	.mt3(mt3),
	.TEST(TEST),
	.TFS1(TFS1),
	.sampler_rx(sampler)
);
endmodule


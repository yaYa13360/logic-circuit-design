// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2021 00:11:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projectFull
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projectFull_vlg_sample_tst(
	clk,
	enter,
	g0,
	g1,
	g2,
	g3,
	g4,
	g5,
	g6,
	g7,
	start,
	u0,
	u1,
	u2,
	u3,
	u4,
	u5,
	u6,
	u7,
	sampler_tx
);
input  clk;
input  enter;
input  g0;
input  g1;
input  g2;
input  g3;
input  g4;
input  g5;
input  g6;
input  g7;
input  start;
input  u0;
input  u1;
input  u2;
input  u3;
input  u4;
input  u5;
input  u6;
input  u7;
output sampler_tx;

reg sample;
time current_time;
always @(clk or enter or g0 or g1 or g2 or g3 or g4 or g5 or g6 or g7 or start or u0 or u1 or u2 or u3 or u4 or u5 or u6 or u7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projectFull_vlg_check_tst (
	col20,
	col21,
	col22,
	col23,
	col24,
	col25,
	col26,
	col27,
	cols0,
	cols1,
	cols2,
	cols3,
	cols4,
	cols5,
	cols6,
	cols7,
	id0,
	id1,
	id2,
	id3,
	it0,
	it1,
	it2,
	it3,
	L1,
	L2,
	L3,
	L4,
	md0,
	md1,
	md2,
	md3,
	mt0,
	mt1,
	mt2,
	mt3,
	rows0,
	rows1,
	rows2,
	rows3,
	rows4,
	rows5,
	rows6,
	rows7,
	sampler_rx
);
input  col20;
input  col21;
input  col22;
input  col23;
input  col24;
input  col25;
input  col26;
input  col27;
input  cols0;
input  cols1;
input  cols2;
input  cols3;
input  cols4;
input  cols5;
input  cols6;
input  cols7;
input  id0;
input  id1;
input  id2;
input  id3;
input  it0;
input  it1;
input  it2;
input  it3;
input  L1;
input  L2;
input  L3;
input  L4;
input  md0;
input  md1;
input  md2;
input  md3;
input  mt0;
input  mt1;
input  mt2;
input  mt3;
input  rows0;
input  rows1;
input  rows2;
input  rows3;
input  rows4;
input  rows5;
input  rows6;
input  rows7;
input sampler_rx;

reg  col20_expected;
reg  col21_expected;
reg  col22_expected;
reg  col23_expected;
reg  col24_expected;
reg  col25_expected;
reg  col26_expected;
reg  col27_expected;
reg  cols0_expected;
reg  cols1_expected;
reg  cols2_expected;
reg  cols3_expected;
reg  cols4_expected;
reg  cols5_expected;
reg  cols6_expected;
reg  cols7_expected;
reg  id0_expected;
reg  id1_expected;
reg  id2_expected;
reg  id3_expected;
reg  it0_expected;
reg  it1_expected;
reg  it2_expected;
reg  it3_expected;
reg  L1_expected;
reg  L2_expected;
reg  L3_expected;
reg  L4_expected;
reg  md0_expected;
reg  md1_expected;
reg  md2_expected;
reg  md3_expected;
reg  mt0_expected;
reg  mt1_expected;
reg  mt2_expected;
reg  mt3_expected;
reg  rows0_expected;
reg  rows1_expected;
reg  rows2_expected;
reg  rows3_expected;
reg  rows4_expected;
reg  rows5_expected;
reg  rows6_expected;
reg  rows7_expected;

reg  col20_prev;
reg  col21_prev;
reg  col22_prev;
reg  col23_prev;
reg  col24_prev;
reg  col25_prev;
reg  col26_prev;
reg  col27_prev;
reg  cols0_prev;
reg  cols1_prev;
reg  cols2_prev;
reg  cols3_prev;
reg  cols4_prev;
reg  cols5_prev;
reg  cols6_prev;
reg  cols7_prev;
reg  id0_prev;
reg  id1_prev;
reg  id2_prev;
reg  id3_prev;
reg  it0_prev;
reg  it1_prev;
reg  it2_prev;
reg  it3_prev;
reg  L1_prev;
reg  L2_prev;
reg  L3_prev;
reg  L4_prev;
reg  md0_prev;
reg  md1_prev;
reg  md2_prev;
reg  md3_prev;
reg  mt0_prev;
reg  mt1_prev;
reg  mt2_prev;
reg  mt3_prev;
reg  rows0_prev;
reg  rows1_prev;
reg  rows2_prev;
reg  rows3_prev;
reg  rows4_prev;
reg  rows5_prev;
reg  rows6_prev;
reg  rows7_prev;

reg  col20_expected_prev;
reg  col21_expected_prev;
reg  col22_expected_prev;
reg  col23_expected_prev;
reg  col24_expected_prev;
reg  col25_expected_prev;
reg  col26_expected_prev;
reg  col27_expected_prev;
reg  cols0_expected_prev;
reg  cols1_expected_prev;
reg  cols2_expected_prev;
reg  cols3_expected_prev;
reg  cols4_expected_prev;
reg  cols5_expected_prev;
reg  cols6_expected_prev;
reg  cols7_expected_prev;
reg  id0_expected_prev;
reg  id1_expected_prev;
reg  id2_expected_prev;
reg  id3_expected_prev;
reg  it0_expected_prev;
reg  it1_expected_prev;
reg  it2_expected_prev;
reg  it3_expected_prev;
reg  L1_expected_prev;
reg  L2_expected_prev;
reg  L3_expected_prev;
reg  L4_expected_prev;
reg  md0_expected_prev;
reg  md1_expected_prev;
reg  md2_expected_prev;
reg  md3_expected_prev;
reg  mt0_expected_prev;
reg  mt1_expected_prev;
reg  mt2_expected_prev;
reg  mt3_expected_prev;
reg  rows0_expected_prev;
reg  rows1_expected_prev;
reg  rows2_expected_prev;
reg  rows3_expected_prev;
reg  rows4_expected_prev;
reg  rows5_expected_prev;
reg  rows6_expected_prev;
reg  rows7_expected_prev;

reg  last_col20_exp;
reg  last_col21_exp;
reg  last_col22_exp;
reg  last_col23_exp;
reg  last_col24_exp;
reg  last_col25_exp;
reg  last_col26_exp;
reg  last_col27_exp;
reg  last_cols0_exp;
reg  last_cols1_exp;
reg  last_cols2_exp;
reg  last_cols3_exp;
reg  last_cols4_exp;
reg  last_cols5_exp;
reg  last_cols6_exp;
reg  last_cols7_exp;
reg  last_id0_exp;
reg  last_id1_exp;
reg  last_id2_exp;
reg  last_id3_exp;
reg  last_it0_exp;
reg  last_it1_exp;
reg  last_it2_exp;
reg  last_it3_exp;
reg  last_L1_exp;
reg  last_L2_exp;
reg  last_L3_exp;
reg  last_L4_exp;
reg  last_md0_exp;
reg  last_md1_exp;
reg  last_md2_exp;
reg  last_md3_exp;
reg  last_mt0_exp;
reg  last_mt1_exp;
reg  last_mt2_exp;
reg  last_mt3_exp;
reg  last_rows0_exp;
reg  last_rows1_exp;
reg  last_rows2_exp;
reg  last_rows3_exp;
reg  last_rows4_exp;
reg  last_rows5_exp;
reg  last_rows6_exp;
reg  last_rows7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:44] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 44'b1;
end

// update real /o prevs

always @(trigger)
begin
	col20_prev = col20;
	col21_prev = col21;
	col22_prev = col22;
	col23_prev = col23;
	col24_prev = col24;
	col25_prev = col25;
	col26_prev = col26;
	col27_prev = col27;
	cols0_prev = cols0;
	cols1_prev = cols1;
	cols2_prev = cols2;
	cols3_prev = cols3;
	cols4_prev = cols4;
	cols5_prev = cols5;
	cols6_prev = cols6;
	cols7_prev = cols7;
	id0_prev = id0;
	id1_prev = id1;
	id2_prev = id2;
	id3_prev = id3;
	it0_prev = it0;
	it1_prev = it1;
	it2_prev = it2;
	it3_prev = it3;
	L1_prev = L1;
	L2_prev = L2;
	L3_prev = L3;
	L4_prev = L4;
	md0_prev = md0;
	md1_prev = md1;
	md2_prev = md2;
	md3_prev = md3;
	mt0_prev = mt0;
	mt1_prev = mt1;
	mt2_prev = mt2;
	mt3_prev = mt3;
	rows0_prev = rows0;
	rows1_prev = rows1;
	rows2_prev = rows2;
	rows3_prev = rows3;
	rows4_prev = rows4;
	rows5_prev = rows5;
	rows6_prev = rows6;
	rows7_prev = rows7;
end

// update expected /o prevs

always @(trigger)
begin
	col20_expected_prev = col20_expected;
	col21_expected_prev = col21_expected;
	col22_expected_prev = col22_expected;
	col23_expected_prev = col23_expected;
	col24_expected_prev = col24_expected;
	col25_expected_prev = col25_expected;
	col26_expected_prev = col26_expected;
	col27_expected_prev = col27_expected;
	cols0_expected_prev = cols0_expected;
	cols1_expected_prev = cols1_expected;
	cols2_expected_prev = cols2_expected;
	cols3_expected_prev = cols3_expected;
	cols4_expected_prev = cols4_expected;
	cols5_expected_prev = cols5_expected;
	cols6_expected_prev = cols6_expected;
	cols7_expected_prev = cols7_expected;
	id0_expected_prev = id0_expected;
	id1_expected_prev = id1_expected;
	id2_expected_prev = id2_expected;
	id3_expected_prev = id3_expected;
	it0_expected_prev = it0_expected;
	it1_expected_prev = it1_expected;
	it2_expected_prev = it2_expected;
	it3_expected_prev = it3_expected;
	L1_expected_prev = L1_expected;
	L2_expected_prev = L2_expected;
	L3_expected_prev = L3_expected;
	L4_expected_prev = L4_expected;
	md0_expected_prev = md0_expected;
	md1_expected_prev = md1_expected;
	md2_expected_prev = md2_expected;
	md3_expected_prev = md3_expected;
	mt0_expected_prev = mt0_expected;
	mt1_expected_prev = mt1_expected;
	mt2_expected_prev = mt2_expected;
	mt3_expected_prev = mt3_expected;
	rows0_expected_prev = rows0_expected;
	rows1_expected_prev = rows1_expected;
	rows2_expected_prev = rows2_expected;
	rows3_expected_prev = rows3_expected;
	rows4_expected_prev = rows4_expected;
	rows5_expected_prev = rows5_expected;
	rows6_expected_prev = rows6_expected;
	rows7_expected_prev = rows7_expected;
end



// expected cols0
initial
begin
	cols0_expected = 1'bX;
end 

// expected cols1
initial
begin
	cols1_expected = 1'bX;
end 

// expected cols2
initial
begin
	cols2_expected = 1'bX;
end 

// expected cols3
initial
begin
	cols3_expected = 1'bX;
end 

// expected cols4
initial
begin
	cols4_expected = 1'bX;
end 

// expected cols5
initial
begin
	cols5_expected = 1'bX;
end 

// expected cols6
initial
begin
	cols6_expected = 1'bX;
end 

// expected cols7
initial
begin
	cols7_expected = 1'bX;
end 

// expected col20
initial
begin
	col20_expected = 1'bX;
end 

// expected col21
initial
begin
	col21_expected = 1'bX;
end 

// expected col22
initial
begin
	col22_expected = 1'bX;
end 

// expected col23
initial
begin
	col23_expected = 1'bX;
end 

// expected col24
initial
begin
	col24_expected = 1'bX;
end 

// expected col25
initial
begin
	col25_expected = 1'bX;
end 

// expected col26
initial
begin
	col26_expected = 1'bX;
end 

// expected col27
initial
begin
	col27_expected = 1'bX;
end 

// expected rows0
initial
begin
	rows0_expected = 1'bX;
end 

// expected rows1
initial
begin
	rows1_expected = 1'bX;
end 

// expected rows2
initial
begin
	rows2_expected = 1'bX;
end 

// expected rows3
initial
begin
	rows3_expected = 1'bX;
end 

// expected rows4
initial
begin
	rows4_expected = 1'bX;
end 

// expected rows5
initial
begin
	rows5_expected = 1'bX;
end 

// expected rows6
initial
begin
	rows6_expected = 1'bX;
end 

// expected rows7
initial
begin
	rows7_expected = 1'bX;
end 

// expected L1
initial
begin
	L1_expected = 1'bX;
end 

// expected L2
initial
begin
	L2_expected = 1'bX;
end 

// expected L3
initial
begin
	L3_expected = 1'bX;
end 

// expected L4
initial
begin
	L4_expected = 1'bX;
end 

// expected id0
initial
begin
	id0_expected = 1'bX;
end 

// expected id1
initial
begin
	id1_expected = 1'bX;
end 

// expected id2
initial
begin
	id2_expected = 1'bX;
end 

// expected id3
initial
begin
	id3_expected = 1'bX;
end 

// expected it0
initial
begin
	it0_expected = 1'bX;
end 

// expected it1
initial
begin
	it1_expected = 1'bX;
end 

// expected it2
initial
begin
	it2_expected = 1'bX;
end 

// expected it3
initial
begin
	it3_expected = 1'bX;
end 

// expected md0
initial
begin
	md0_expected = 1'bX;
end 

// expected md1
initial
begin
	md1_expected = 1'bX;
end 

// expected md2
initial
begin
	md2_expected = 1'bX;
end 

// expected md3
initial
begin
	md3_expected = 1'bX;
end 

// expected mt0
initial
begin
	mt0_expected = 1'bX;
end 

// expected mt1
initial
begin
	mt1_expected = 1'bX;
end 

// expected mt2
initial
begin
	mt2_expected = 1'bX;
end 

// expected mt3
initial
begin
	mt3_expected = 1'bX;
end 
// generate trigger
always @(col20_expected or col20 or col21_expected or col21 or col22_expected or col22 or col23_expected or col23 or col24_expected or col24 or col25_expected or col25 or col26_expected or col26 or col27_expected or col27 or cols0_expected or cols0 or cols1_expected or cols1 or cols2_expected or cols2 or cols3_expected or cols3 or cols4_expected or cols4 or cols5_expected or cols5 or cols6_expected or cols6 or cols7_expected or cols7 or id0_expected or id0 or id1_expected or id1 or id2_expected or id2 or id3_expected or id3 or it0_expected or it0 or it1_expected or it1 or it2_expected or it2 or it3_expected or it3 or L1_expected or L1 or L2_expected or L2 or L3_expected or L3 or L4_expected or L4 or md0_expected or md0 or md1_expected or md1 or md2_expected or md2 or md3_expected or md3 or mt0_expected or mt0 or mt1_expected or mt1 or mt2_expected or mt2 or mt3_expected or mt3 or rows0_expected or rows0 or rows1_expected or rows1 or rows2_expected or rows2 or rows3_expected or rows3 or rows4_expected or rows4 or rows5_expected or rows5 or rows6_expected or rows6 or rows7_expected or rows7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected col20 = %b | expected col21 = %b | expected col22 = %b | expected col23 = %b | expected col24 = %b | expected col25 = %b | expected col26 = %b | expected col27 = %b | expected cols0 = %b | expected cols1 = %b | expected cols2 = %b | expected cols3 = %b | expected cols4 = %b | expected cols5 = %b | expected cols6 = %b | expected cols7 = %b | expected id0 = %b | expected id1 = %b | expected id2 = %b | expected id3 = %b | expected it0 = %b | expected it1 = %b | expected it2 = %b | expected it3 = %b | expected L1 = %b | expected L2 = %b | expected L3 = %b | expected L4 = %b | expected md0 = %b | expected md1 = %b | expected md2 = %b | expected md3 = %b | expected mt0 = %b | expected mt1 = %b | expected mt2 = %b | expected mt3 = %b | expected rows0 = %b | expected rows1 = %b | expected rows2 = %b | expected rows3 = %b | expected rows4 = %b | expected rows5 = %b | expected rows6 = %b | expected rows7 = %b | ",col20_expected_prev,col21_expected_prev,col22_expected_prev,col23_expected_prev,col24_expected_prev,col25_expected_prev,col26_expected_prev,col27_expected_prev,cols0_expected_prev,cols1_expected_prev,cols2_expected_prev,cols3_expected_prev,cols4_expected_prev,cols5_expected_prev,cols6_expected_prev,cols7_expected_prev,id0_expected_prev,id1_expected_prev,id2_expected_prev,id3_expected_prev,it0_expected_prev,it1_expected_prev,it2_expected_prev,it3_expected_prev,L1_expected_prev,L2_expected_prev,L3_expected_prev,L4_expected_prev,md0_expected_prev,md1_expected_prev,md2_expected_prev,md3_expected_prev,mt0_expected_prev,mt1_expected_prev,mt2_expected_prev,mt3_expected_prev,rows0_expected_prev,rows1_expected_prev,rows2_expected_prev,rows3_expected_prev,rows4_expected_prev,rows5_expected_prev,rows6_expected_prev,rows7_expected_prev);
	$display("| real col20 = %b | real col21 = %b | real col22 = %b | real col23 = %b | real col24 = %b | real col25 = %b | real col26 = %b | real col27 = %b | real cols0 = %b | real cols1 = %b | real cols2 = %b | real cols3 = %b | real cols4 = %b | real cols5 = %b | real cols6 = %b | real cols7 = %b | real id0 = %b | real id1 = %b | real id2 = %b | real id3 = %b | real it0 = %b | real it1 = %b | real it2 = %b | real it3 = %b | real L1 = %b | real L2 = %b | real L3 = %b | real L4 = %b | real md0 = %b | real md1 = %b | real md2 = %b | real md3 = %b | real mt0 = %b | real mt1 = %b | real mt2 = %b | real mt3 = %b | real rows0 = %b | real rows1 = %b | real rows2 = %b | real rows3 = %b | real rows4 = %b | real rows5 = %b | real rows6 = %b | real rows7 = %b | ",col20_prev,col21_prev,col22_prev,col23_prev,col24_prev,col25_prev,col26_prev,col27_prev,cols0_prev,cols1_prev,cols2_prev,cols3_prev,cols4_prev,cols5_prev,cols6_prev,cols7_prev,id0_prev,id1_prev,id2_prev,id3_prev,it0_prev,it1_prev,it2_prev,it3_prev,L1_prev,L2_prev,L3_prev,L4_prev,md0_prev,md1_prev,md2_prev,md3_prev,mt0_prev,mt1_prev,mt2_prev,mt3_prev,rows0_prev,rows1_prev,rows2_prev,rows3_prev,rows4_prev,rows5_prev,rows6_prev,rows7_prev);
`endif
	if (
		( col20_expected_prev !== 1'bx ) && ( col20_prev !== col20_expected_prev )
		&& ((col20_expected_prev !== last_col20_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col20 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col20_expected_prev);
		$display ("     Real value = %b", col20_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col20_exp = col20_expected_prev;
	end
	if (
		( col21_expected_prev !== 1'bx ) && ( col21_prev !== col21_expected_prev )
		&& ((col21_expected_prev !== last_col21_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col21_expected_prev);
		$display ("     Real value = %b", col21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_col21_exp = col21_expected_prev;
	end
	if (
		( col22_expected_prev !== 1'bx ) && ( col22_prev !== col22_expected_prev )
		&& ((col22_expected_prev !== last_col22_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col22_expected_prev);
		$display ("     Real value = %b", col22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_col22_exp = col22_expected_prev;
	end
	if (
		( col23_expected_prev !== 1'bx ) && ( col23_prev !== col23_expected_prev )
		&& ((col23_expected_prev !== last_col23_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col23 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col23_expected_prev);
		$display ("     Real value = %b", col23_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_col23_exp = col23_expected_prev;
	end
	if (
		( col24_expected_prev !== 1'bx ) && ( col24_prev !== col24_expected_prev )
		&& ((col24_expected_prev !== last_col24_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col24 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col24_expected_prev);
		$display ("     Real value = %b", col24_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_col24_exp = col24_expected_prev;
	end
	if (
		( col25_expected_prev !== 1'bx ) && ( col25_prev !== col25_expected_prev )
		&& ((col25_expected_prev !== last_col25_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col25_expected_prev);
		$display ("     Real value = %b", col25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_col25_exp = col25_expected_prev;
	end
	if (
		( col26_expected_prev !== 1'bx ) && ( col26_prev !== col26_expected_prev )
		&& ((col26_expected_prev !== last_col26_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col26 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col26_expected_prev);
		$display ("     Real value = %b", col26_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_col26_exp = col26_expected_prev;
	end
	if (
		( col27_expected_prev !== 1'bx ) && ( col27_prev !== col27_expected_prev )
		&& ((col27_expected_prev !== last_col27_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col27 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col27_expected_prev);
		$display ("     Real value = %b", col27_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_col27_exp = col27_expected_prev;
	end
	if (
		( cols0_expected_prev !== 1'bx ) && ( cols0_prev !== cols0_expected_prev )
		&& ((cols0_expected_prev !== last_cols0_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cols0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cols0_expected_prev);
		$display ("     Real value = %b", cols0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cols0_exp = cols0_expected_prev;
	end
	if (
		( cols1_expected_prev !== 1'bx ) && ( cols1_prev !== cols1_expected_prev )
		&& ((cols1_expected_prev !== last_cols1_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cols1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cols1_expected_prev);
		$display ("     Real value = %b", cols1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_cols1_exp = cols1_expected_prev;
	end
	if (
		( cols2_expected_prev !== 1'bx ) && ( cols2_prev !== cols2_expected_prev )
		&& ((cols2_expected_prev !== last_cols2_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cols2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cols2_expected_prev);
		$display ("     Real value = %b", cols2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_cols2_exp = cols2_expected_prev;
	end
	if (
		( cols3_expected_prev !== 1'bx ) && ( cols3_prev !== cols3_expected_prev )
		&& ((cols3_expected_prev !== last_cols3_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cols3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cols3_expected_prev);
		$display ("     Real value = %b", cols3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_cols3_exp = cols3_expected_prev;
	end
	if (
		( cols4_expected_prev !== 1'bx ) && ( cols4_prev !== cols4_expected_prev )
		&& ((cols4_expected_prev !== last_cols4_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cols4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cols4_expected_prev);
		$display ("     Real value = %b", cols4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_cols4_exp = cols4_expected_prev;
	end
	if (
		( cols5_expected_prev !== 1'bx ) && ( cols5_prev !== cols5_expected_prev )
		&& ((cols5_expected_prev !== last_cols5_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cols5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cols5_expected_prev);
		$display ("     Real value = %b", cols5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_cols5_exp = cols5_expected_prev;
	end
	if (
		( cols6_expected_prev !== 1'bx ) && ( cols6_prev !== cols6_expected_prev )
		&& ((cols6_expected_prev !== last_cols6_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cols6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cols6_expected_prev);
		$display ("     Real value = %b", cols6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_cols6_exp = cols6_expected_prev;
	end
	if (
		( cols7_expected_prev !== 1'bx ) && ( cols7_prev !== cols7_expected_prev )
		&& ((cols7_expected_prev !== last_cols7_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cols7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cols7_expected_prev);
		$display ("     Real value = %b", cols7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_cols7_exp = cols7_expected_prev;
	end
	if (
		( id0_expected_prev !== 1'bx ) && ( id0_prev !== id0_expected_prev )
		&& ((id0_expected_prev !== last_id0_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id0_expected_prev);
		$display ("     Real value = %b", id0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_id0_exp = id0_expected_prev;
	end
	if (
		( id1_expected_prev !== 1'bx ) && ( id1_prev !== id1_expected_prev )
		&& ((id1_expected_prev !== last_id1_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id1_expected_prev);
		$display ("     Real value = %b", id1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_id1_exp = id1_expected_prev;
	end
	if (
		( id2_expected_prev !== 1'bx ) && ( id2_prev !== id2_expected_prev )
		&& ((id2_expected_prev !== last_id2_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id2_expected_prev);
		$display ("     Real value = %b", id2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_id2_exp = id2_expected_prev;
	end
	if (
		( id3_expected_prev !== 1'bx ) && ( id3_prev !== id3_expected_prev )
		&& ((id3_expected_prev !== last_id3_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port id3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", id3_expected_prev);
		$display ("     Real value = %b", id3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_id3_exp = id3_expected_prev;
	end
	if (
		( it0_expected_prev !== 1'bx ) && ( it0_prev !== it0_expected_prev )
		&& ((it0_expected_prev !== last_it0_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port it0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", it0_expected_prev);
		$display ("     Real value = %b", it0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_it0_exp = it0_expected_prev;
	end
	if (
		( it1_expected_prev !== 1'bx ) && ( it1_prev !== it1_expected_prev )
		&& ((it1_expected_prev !== last_it1_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port it1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", it1_expected_prev);
		$display ("     Real value = %b", it1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_it1_exp = it1_expected_prev;
	end
	if (
		( it2_expected_prev !== 1'bx ) && ( it2_prev !== it2_expected_prev )
		&& ((it2_expected_prev !== last_it2_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port it2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", it2_expected_prev);
		$display ("     Real value = %b", it2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_it2_exp = it2_expected_prev;
	end
	if (
		( it3_expected_prev !== 1'bx ) && ( it3_prev !== it3_expected_prev )
		&& ((it3_expected_prev !== last_it3_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port it3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", it3_expected_prev);
		$display ("     Real value = %b", it3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_it3_exp = it3_expected_prev;
	end
	if (
		( L1_expected_prev !== 1'bx ) && ( L1_prev !== L1_expected_prev )
		&& ((L1_expected_prev !== last_L1_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_L1_exp = L1_expected_prev;
	end
	if (
		( L2_expected_prev !== 1'bx ) && ( L2_prev !== L2_expected_prev )
		&& ((L2_expected_prev !== last_L2_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_L2_exp = L2_expected_prev;
	end
	if (
		( L3_expected_prev !== 1'bx ) && ( L3_prev !== L3_expected_prev )
		&& ((L3_expected_prev !== last_L3_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_L3_exp = L3_expected_prev;
	end
	if (
		( L4_expected_prev !== 1'bx ) && ( L4_prev !== L4_expected_prev )
		&& ((L4_expected_prev !== last_L4_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_L4_exp = L4_expected_prev;
	end
	if (
		( md0_expected_prev !== 1'bx ) && ( md0_prev !== md0_expected_prev )
		&& ((md0_expected_prev !== last_md0_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port md0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", md0_expected_prev);
		$display ("     Real value = %b", md0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_md0_exp = md0_expected_prev;
	end
	if (
		( md1_expected_prev !== 1'bx ) && ( md1_prev !== md1_expected_prev )
		&& ((md1_expected_prev !== last_md1_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port md1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", md1_expected_prev);
		$display ("     Real value = %b", md1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_md1_exp = md1_expected_prev;
	end
	if (
		( md2_expected_prev !== 1'bx ) && ( md2_prev !== md2_expected_prev )
		&& ((md2_expected_prev !== last_md2_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port md2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", md2_expected_prev);
		$display ("     Real value = %b", md2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_md2_exp = md2_expected_prev;
	end
	if (
		( md3_expected_prev !== 1'bx ) && ( md3_prev !== md3_expected_prev )
		&& ((md3_expected_prev !== last_md3_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port md3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", md3_expected_prev);
		$display ("     Real value = %b", md3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_md3_exp = md3_expected_prev;
	end
	if (
		( mt0_expected_prev !== 1'bx ) && ( mt0_prev !== mt0_expected_prev )
		&& ((mt0_expected_prev !== last_mt0_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mt0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mt0_expected_prev);
		$display ("     Real value = %b", mt0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_mt0_exp = mt0_expected_prev;
	end
	if (
		( mt1_expected_prev !== 1'bx ) && ( mt1_prev !== mt1_expected_prev )
		&& ((mt1_expected_prev !== last_mt1_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mt1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mt1_expected_prev);
		$display ("     Real value = %b", mt1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_mt1_exp = mt1_expected_prev;
	end
	if (
		( mt2_expected_prev !== 1'bx ) && ( mt2_prev !== mt2_expected_prev )
		&& ((mt2_expected_prev !== last_mt2_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mt2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mt2_expected_prev);
		$display ("     Real value = %b", mt2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_mt2_exp = mt2_expected_prev;
	end
	if (
		( mt3_expected_prev !== 1'bx ) && ( mt3_prev !== mt3_expected_prev )
		&& ((mt3_expected_prev !== last_mt3_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mt3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mt3_expected_prev);
		$display ("     Real value = %b", mt3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_mt3_exp = mt3_expected_prev;
	end
	if (
		( rows0_expected_prev !== 1'bx ) && ( rows0_prev !== rows0_expected_prev )
		&& ((rows0_expected_prev !== last_rows0_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rows0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rows0_expected_prev);
		$display ("     Real value = %b", rows0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_rows0_exp = rows0_expected_prev;
	end
	if (
		( rows1_expected_prev !== 1'bx ) && ( rows1_prev !== rows1_expected_prev )
		&& ((rows1_expected_prev !== last_rows1_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rows1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rows1_expected_prev);
		$display ("     Real value = %b", rows1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_rows1_exp = rows1_expected_prev;
	end
	if (
		( rows2_expected_prev !== 1'bx ) && ( rows2_prev !== rows2_expected_prev )
		&& ((rows2_expected_prev !== last_rows2_exp) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rows2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rows2_expected_prev);
		$display ("     Real value = %b", rows2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_rows2_exp = rows2_expected_prev;
	end
	if (
		( rows3_expected_prev !== 1'bx ) && ( rows3_prev !== rows3_expected_prev )
		&& ((rows3_expected_prev !== last_rows3_exp) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rows3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rows3_expected_prev);
		$display ("     Real value = %b", rows3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_rows3_exp = rows3_expected_prev;
	end
	if (
		( rows4_expected_prev !== 1'bx ) && ( rows4_prev !== rows4_expected_prev )
		&& ((rows4_expected_prev !== last_rows4_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rows4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rows4_expected_prev);
		$display ("     Real value = %b", rows4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_rows4_exp = rows4_expected_prev;
	end
	if (
		( rows5_expected_prev !== 1'bx ) && ( rows5_prev !== rows5_expected_prev )
		&& ((rows5_expected_prev !== last_rows5_exp) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rows5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rows5_expected_prev);
		$display ("     Real value = %b", rows5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_rows5_exp = rows5_expected_prev;
	end
	if (
		( rows6_expected_prev !== 1'bx ) && ( rows6_prev !== rows6_expected_prev )
		&& ((rows6_expected_prev !== last_rows6_exp) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rows6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rows6_expected_prev);
		$display ("     Real value = %b", rows6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_rows6_exp = rows6_expected_prev;
	end
	if (
		( rows7_expected_prev !== 1'bx ) && ( rows7_prev !== rows7_expected_prev )
		&& ((rows7_expected_prev !== last_rows7_exp) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rows7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rows7_expected_prev);
		$display ("     Real value = %b", rows7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_rows7_exp = rows7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module projectFull_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enter;
reg g0;
reg g1;
reg g2;
reg g3;
reg g4;
reg g5;
reg g6;
reg g7;
reg start;
reg u0;
reg u1;
reg u2;
reg u3;
reg u4;
reg u5;
reg u6;
reg u7;
// wires                                               
wire col20;
wire col21;
wire col22;
wire col23;
wire col24;
wire col25;
wire col26;
wire col27;
wire cols0;
wire cols1;
wire cols2;
wire cols3;
wire cols4;
wire cols5;
wire cols6;
wire cols7;
wire id0;
wire id1;
wire id2;
wire id3;
wire it0;
wire it1;
wire it2;
wire it3;
wire L1;
wire L2;
wire L3;
wire L4;
wire md0;
wire md1;
wire md2;
wire md3;
wire mt0;
wire mt1;
wire mt2;
wire mt3;
wire rows0;
wire rows1;
wire rows2;
wire rows3;
wire rows4;
wire rows5;
wire rows6;
wire rows7;

wire sampler;                             

// assign statements (if any)                          
projectFull i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.col20(col20),
	.col21(col21),
	.col22(col22),
	.col23(col23),
	.col24(col24),
	.col25(col25),
	.col26(col26),
	.col27(col27),
	.cols0(cols0),
	.cols1(cols1),
	.cols2(cols2),
	.cols3(cols3),
	.cols4(cols4),
	.cols5(cols5),
	.cols6(cols6),
	.cols7(cols7),
	.enter(enter),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.g5(g5),
	.g6(g6),
	.g7(g7),
	.id0(id0),
	.id1(id1),
	.id2(id2),
	.id3(id3),
	.it0(it0),
	.it1(it1),
	.it2(it2),
	.it3(it3),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.md0(md0),
	.md1(md1),
	.md2(md2),
	.md3(md3),
	.mt0(mt0),
	.mt1(mt1),
	.mt2(mt2),
	.mt3(mt3),
	.rows0(rows0),
	.rows1(rows1),
	.rows2(rows2),
	.rows3(rows3),
	.rows4(rows4),
	.rows5(rows5),
	.rows6(rows6),
	.rows7(rows7),
	.start(start),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.u3(u3),
	.u4(u4),
	.u5(u5),
	.u6(u6),
	.u7(u7)
);

// enter
always
begin
	enter = 1'b0;
	enter = #1000 1'b1;
	#1000;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// u0
initial
begin
	u0 = 1'b0;
	u0 = #256000 1'b1;
	u0 = #256000 1'b0;
	u0 = #256000 1'b1;
end 

// u1
initial
begin
	repeat(3)
	begin
		u1 = 1'b0;
		u1 = #128000 1'b1;
		# 128000;
	end
	u1 = 1'b0;
	u1 = #128000 1'b1;
end 

// u2
initial
begin
	repeat(7)
	begin
		u2 = 1'b0;
		u2 = #64000 1'b1;
		# 64000;
	end
	u2 = 1'b0;
	u2 = #64000 1'b1;
end 

// u3
initial
begin
	repeat(15)
	begin
		u3 = 1'b0;
		u3 = #32000 1'b1;
		# 32000;
	end
	u3 = 1'b0;
	u3 = #32000 1'b1;
end 

// u4
initial
begin
	repeat(31)
	begin
		u4 = 1'b0;
		u4 = #16000 1'b1;
		# 16000;
	end
	u4 = 1'b0;
end 

// u5
initial
begin
	repeat(62)
	begin
		u5 = 1'b0;
		u5 = #8000 1'b1;
		# 8000;
	end
	u5 = 1'b0;
end 

// u6
always
begin
	u6 = 1'b0;
	u6 = #4000 1'b1;
	#4000;
end 

// u7
always
begin
	u7 = 1'b0;
	u7 = #2000 1'b1;
	#2000;
end 

// g0
initial
begin
	g0 = 1'b0;
end 

// g1
initial
begin
	g1 = 1'b1;
end 

// g2
initial
begin
	g2 = 1'b0;
end 

// g3
initial
begin
	g3 = 1'b1;
end 

// g4
initial
begin
	g4 = 1'b0;
end 

// g5
initial
begin
	g5 = 1'b0;
end 

// g6
initial
begin
	g6 = 1'b0;
end 

// g7
initial
begin
	g7 = 1'b0;
end 

// start
initial
begin
	start = 1'b0;
end 

projectFull_vlg_sample_tst tb_sample (
	.clk(clk),
	.enter(enter),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.g5(g5),
	.g6(g6),
	.g7(g7),
	.start(start),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.u3(u3),
	.u4(u4),
	.u5(u5),
	.u6(u6),
	.u7(u7),
	.sampler_tx(sampler)
);

projectFull_vlg_check_tst tb_out(
	.col20(col20),
	.col21(col21),
	.col22(col22),
	.col23(col23),
	.col24(col24),
	.col25(col25),
	.col26(col26),
	.col27(col27),
	.cols0(cols0),
	.cols1(cols1),
	.cols2(cols2),
	.cols3(cols3),
	.cols4(cols4),
	.cols5(cols5),
	.cols6(cols6),
	.cols7(cols7),
	.id0(id0),
	.id1(id1),
	.id2(id2),
	.id3(id3),
	.it0(it0),
	.it1(it1),
	.it2(it2),
	.it3(it3),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.md0(md0),
	.md1(md1),
	.md2(md2),
	.md3(md3),
	.mt0(mt0),
	.mt1(mt1),
	.mt2(mt2),
	.mt3(mt3),
	.rows0(rows0),
	.rows1(rows1),
	.rows2(rows2),
	.rows3(rows3),
	.rows4(rows4),
	.rows5(rows5),
	.rows6(rows6),
	.rows7(rows7),
	.sampler_rx(sampler)
);
endmodule


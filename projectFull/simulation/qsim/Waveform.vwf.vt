// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2021 15:40:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projectFull
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projectFull_vlg_sample_tst(
	enter,
	g0,
	g1,
	g2,
	g3,
	g4,
	g5,
	g6,
	g7,
	u0,
	u1,
	u2,
	u3,
	u4,
	u5,
	u6,
	u7,
	sampler_tx
);
input  enter;
input  g0;
input  g1;
input  g2;
input  g3;
input  g4;
input  g5;
input  g6;
input  g7;
input  u0;
input  u1;
input  u2;
input  u3;
input  u4;
input  u5;
input  u6;
input  u7;
output sampler_tx;

reg sample;
time current_time;
always @(enter or g0 or g1 or g2 or g3 or g4 or g5 or g6 or g7 or u0 or u1 or u2 or u3 or u4 or u5 or u6 or u7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projectFull_vlg_check_tst (
	TFS0,
	TFS1,
	sampler_rx
);
input  TFS0;
input  TFS1;
input sampler_rx;

reg  TFS0_expected;
reg  TFS1_expected;

reg  TFS0_prev;
reg  TFS1_prev;

reg  TFS0_expected_prev;
reg  TFS1_expected_prev;

reg  last_TFS0_exp;
reg  last_TFS1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	TFS0_prev = TFS0;
	TFS1_prev = TFS1;
end

// update expected /o prevs

always @(trigger)
begin
	TFS0_expected_prev = TFS0_expected;
	TFS1_expected_prev = TFS1_expected;
end



// expected TFS0
initial
begin
	TFS0_expected = 1'bX;
end 

// expected TFS1
initial
begin
	TFS1_expected = 1'bX;
end 
// generate trigger
always @(TFS0_expected or TFS0 or TFS1_expected or TFS1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected TFS0 = %b | expected TFS1 = %b | ",TFS0_expected_prev,TFS1_expected_prev);
	$display("| real TFS0 = %b | real TFS1 = %b | ",TFS0_prev,TFS1_prev);
`endif
	if (
		( TFS0_expected_prev !== 1'bx ) && ( TFS0_prev !== TFS0_expected_prev )
		&& ((TFS0_expected_prev !== last_TFS0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TFS0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TFS0_expected_prev);
		$display ("     Real value = %b", TFS0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_TFS0_exp = TFS0_expected_prev;
	end
	if (
		( TFS1_expected_prev !== 1'bx ) && ( TFS1_prev !== TFS1_expected_prev )
		&& ((TFS1_expected_prev !== last_TFS1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TFS1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TFS1_expected_prev);
		$display ("     Real value = %b", TFS1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_TFS1_exp = TFS1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projectFull_vlg_vec_tst();
// constants                                           
// general purpose registers
reg enter;
reg g0;
reg g1;
reg g2;
reg g3;
reg g4;
reg g5;
reg g6;
reg g7;
reg u0;
reg u1;
reg u2;
reg u3;
reg u4;
reg u5;
reg u6;
reg u7;
// wires                                               
wire TFS0;
wire TFS1;

wire sampler;                             

// assign statements (if any)                          
projectFull i1 (
// port map - connection between master ports and signals/registers   
	.enter(enter),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.g5(g5),
	.g6(g6),
	.g7(g7),
	.TFS0(TFS0),
	.TFS1(TFS1),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.u3(u3),
	.u4(u4),
	.u5(u5),
	.u6(u6),
	.u7(u7)
);

// g0
initial
begin
	g0 = 1'b0;
end 

// g1
initial
begin
	g1 = 1'b1;
end 

// g2
initial
begin
	g2 = 1'b0;
end 

// g3
initial
begin
	g3 = 1'b1;
end 

// g4
initial
begin
	g4 = 1'b0;
end 

// g5
initial
begin
	g5 = 1'b0;
end 

// g6
initial
begin
	g6 = 1'b0;
end 

// g7
initial
begin
	g7 = 1'b0;
end 

// enter
always
begin
	enter = 1'b0;
	enter = #1000 1'b1;
	#1000;
end 

// u0
initial
begin
	u0 = 1'b0;
	u0 = #256000 1'b1;
	u0 = #256000 1'b0;
	u0 = #256000 1'b1;
end 

// u1
initial
begin
	repeat(3)
	begin
		u1 = 1'b0;
		u1 = #128000 1'b1;
		# 128000;
	end
	u1 = 1'b0;
	u1 = #128000 1'b1;
end 

// u2
initial
begin
	repeat(7)
	begin
		u2 = 1'b0;
		u2 = #64000 1'b1;
		# 64000;
	end
	u2 = 1'b0;
	u2 = #64000 1'b1;
end 

// u3
initial
begin
	repeat(15)
	begin
		u3 = 1'b0;
		u3 = #32000 1'b1;
		# 32000;
	end
	u3 = 1'b0;
	u3 = #32000 1'b1;
end 

// u4
initial
begin
	repeat(31)
	begin
		u4 = 1'b0;
		u4 = #16000 1'b1;
		# 16000;
	end
	u4 = 1'b0;
end 

// u5
initial
begin
	repeat(62)
	begin
		u5 = 1'b0;
		u5 = #8000 1'b1;
		# 8000;
	end
	u5 = 1'b0;
end 

// u6
always
begin
	u6 = 1'b0;
	u6 = #4000 1'b1;
	#4000;
end 

// u7
always
begin
	u7 = 1'b0;
	u7 = #2000 1'b1;
	#2000;
end 

projectFull_vlg_sample_tst tb_sample (
	.enter(enter),
	.g0(g0),
	.g1(g1),
	.g2(g2),
	.g3(g3),
	.g4(g4),
	.g5(g5),
	.g6(g6),
	.g7(g7),
	.u0(u0),
	.u1(u1),
	.u2(u2),
	.u3(u3),
	.u4(u4),
	.u5(u5),
	.u6(u6),
	.u7(u7),
	.sampler_tx(sampler)
);

projectFull_vlg_check_tst tb_out(
	.TFS0(TFS0),
	.TFS1(TFS1),
	.sampler_rx(sampler)
);
endmodule


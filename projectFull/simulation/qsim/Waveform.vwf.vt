// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2021 11:52:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projectFull
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projectFull_vlg_sample_tst(
	enter,
	in0,
	in1,
	in2,
	in3,
	in4,
	in5,
	in6,
	in7,
	sampler_tx
);
input  enter;
input  in0;
input  in1;
input  in2;
input  in3;
input  in4;
input  in5;
input  in6;
input  in7;
output sampler_tx;

reg sample;
time current_time;
always @(enter or in0 or in1 or in2 or in3 or in4 or in5 or in6 or in7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projectFull_vlg_check_tst (
	TSF0,
	TSF1,
	sampler_rx
);
input  TSF0;
input  TSF1;
input sampler_rx;

reg  TSF0_expected;
reg  TSF1_expected;

reg  TSF0_prev;
reg  TSF1_prev;

reg  TSF0_expected_prev;
reg  TSF1_expected_prev;

reg  last_TSF0_exp;
reg  last_TSF1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	TSF0_prev = TSF0;
	TSF1_prev = TSF1;
end

// update expected /o prevs

always @(trigger)
begin
	TSF0_expected_prev = TSF0_expected;
	TSF1_expected_prev = TSF1_expected;
end



// expected TSF0
initial
begin
	TSF0_expected = 1'bX;
end 

// expected TSF1
initial
begin
	TSF1_expected = 1'bX;
end 
// generate trigger
always @(TSF0_expected or TSF0 or TSF1_expected or TSF1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected TSF0 = %b | expected TSF1 = %b | ",TSF0_expected_prev,TSF1_expected_prev);
	$display("| real TSF0 = %b | real TSF1 = %b | ",TSF0_prev,TSF1_prev);
`endif
	if (
		( TSF0_expected_prev !== 1'bx ) && ( TSF0_prev !== TSF0_expected_prev )
		&& ((TSF0_expected_prev !== last_TSF0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TSF0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TSF0_expected_prev);
		$display ("     Real value = %b", TSF0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_TSF0_exp = TSF0_expected_prev;
	end
	if (
		( TSF1_expected_prev !== 1'bx ) && ( TSF1_prev !== TSF1_expected_prev )
		&& ((TSF1_expected_prev !== last_TSF1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TSF1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TSF1_expected_prev);
		$display ("     Real value = %b", TSF1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_TSF1_exp = TSF1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projectFull_vlg_vec_tst();
// constants                                           
// general purpose registers
reg enter;
reg in0;
reg in1;
reg in2;
reg in3;
reg in4;
reg in5;
reg in6;
reg in7;
// wires                                               
wire TSF0;
wire TSF1;

wire sampler;                             

// assign statements (if any)                          
projectFull i1 (
// port map - connection between master ports and signals/registers   
	.enter(enter),
	.in0(in0),
	.in1(in1),
	.in2(in2),
	.in3(in3),
	.in4(in4),
	.in5(in5),
	.in6(in6),
	.in7(in7),
	.TSF0(TSF0),
	.TSF1(TSF1)
);

// enter
always
begin
	enter = 1'b0;
	enter = #1000 1'b1;
	#1000;
end 

// in0
initial
begin
	in0 = 1'b0;
	in0 = #256000 1'b1;
	in0 = #256000 1'b0;
	in0 = #256000 1'b1;
end 

// in1
initial
begin
	repeat(3)
	begin
		in1 = 1'b0;
		in1 = #128000 1'b1;
		# 128000;
	end
	in1 = 1'b0;
	in1 = #128000 1'b1;
end 

// in2
initial
begin
	repeat(7)
	begin
		in2 = 1'b0;
		in2 = #64000 1'b1;
		# 64000;
	end
	in2 = 1'b0;
	in2 = #64000 1'b1;
end 

// in3
initial
begin
	repeat(15)
	begin
		in3 = 1'b0;
		in3 = #32000 1'b1;
		# 32000;
	end
	in3 = 1'b0;
	in3 = #32000 1'b1;
end 

// in4
initial
begin
	repeat(31)
	begin
		in4 = 1'b0;
		in4 = #16000 1'b1;
		# 16000;
	end
	in4 = 1'b0;
end 

// in5
initial
begin
	repeat(62)
	begin
		in5 = 1'b0;
		in5 = #8000 1'b1;
		# 8000;
	end
	in5 = 1'b0;
end 

// in6
always
begin
	in6 = 1'b0;
	in6 = #4000 1'b1;
	#4000;
end 

// in7
always
begin
	in7 = 1'b0;
	in7 = #2000 1'b1;
	#2000;
end 

projectFull_vlg_sample_tst tb_sample (
	.enter(enter),
	.in0(in0),
	.in1(in1),
	.in2(in2),
	.in3(in3),
	.in4(in4),
	.in5(in5),
	.in6(in6),
	.in7(in7),
	.sampler_tx(sampler)
);

projectFull_vlg_check_tst tb_out(
	.TSF0(TSF0),
	.TSF1(TSF1),
	.sampler_rx(sampler)
);
endmodule


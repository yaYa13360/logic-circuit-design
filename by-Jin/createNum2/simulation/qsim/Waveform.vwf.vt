// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/17/2021 16:12:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    createNum2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module createNum2_vlg_sample_tst(
	clk1,
	clk2,
	sampler_tx
);
input  clk1;
input  clk2;
output sampler_tx;

reg sample;
time current_time;
always @(clk1 or clk2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module createNum2_vlg_check_tst (
	tenT,
	unitT,
	sampler_rx
);
input [3:0] tenT;
input [3:0] unitT;
input sampler_rx;

reg [3:0] tenT_expected;
reg [3:0] unitT_expected;

reg [3:0] tenT_prev;
reg [3:0] unitT_prev;

reg [3:0] tenT_expected_prev;
reg [3:0] unitT_expected_prev;

reg [3:0] last_tenT_exp;
reg [3:0] last_unitT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	tenT_prev = tenT;
	unitT_prev = unitT;
end

// update expected /o prevs

always @(trigger)
begin
	tenT_expected_prev = tenT_expected;
	unitT_expected_prev = unitT_expected;
end


// expected tenT[ 3 ]
initial
begin
	tenT_expected[3] = 1'bX;
end 
// expected tenT[ 2 ]
initial
begin
	tenT_expected[2] = 1'bX;
end 
// expected tenT[ 1 ]
initial
begin
	tenT_expected[1] = 1'bX;
end 
// expected tenT[ 0 ]
initial
begin
	tenT_expected[0] = 1'bX;
end 
// expected unitT[ 3 ]
initial
begin
	unitT_expected[3] = 1'bX;
end 
// expected unitT[ 2 ]
initial
begin
	unitT_expected[2] = 1'bX;
end 
// expected unitT[ 1 ]
initial
begin
	unitT_expected[1] = 1'bX;
end 
// expected unitT[ 0 ]
initial
begin
	unitT_expected[0] = 1'bX;
end 
// generate trigger
always @(tenT_expected or tenT or unitT_expected or unitT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected tenT = %b | expected unitT = %b | ",tenT_expected_prev,unitT_expected_prev);
	$display("| real tenT = %b | real unitT = %b | ",tenT_prev,unitT_prev);
`endif
	if (
		( tenT_expected_prev[0] !== 1'bx ) && ( tenT_prev[0] !== tenT_expected_prev[0] )
		&& ((tenT_expected_prev[0] !== last_tenT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenT_expected_prev);
		$display ("     Real value = %b", tenT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_tenT_exp[0] = tenT_expected_prev[0];
	end
	if (
		( tenT_expected_prev[1] !== 1'bx ) && ( tenT_prev[1] !== tenT_expected_prev[1] )
		&& ((tenT_expected_prev[1] !== last_tenT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenT_expected_prev);
		$display ("     Real value = %b", tenT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_tenT_exp[1] = tenT_expected_prev[1];
	end
	if (
		( tenT_expected_prev[2] !== 1'bx ) && ( tenT_prev[2] !== tenT_expected_prev[2] )
		&& ((tenT_expected_prev[2] !== last_tenT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenT_expected_prev);
		$display ("     Real value = %b", tenT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_tenT_exp[2] = tenT_expected_prev[2];
	end
	if (
		( tenT_expected_prev[3] !== 1'bx ) && ( tenT_prev[3] !== tenT_expected_prev[3] )
		&& ((tenT_expected_prev[3] !== last_tenT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tenT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tenT_expected_prev);
		$display ("     Real value = %b", tenT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_tenT_exp[3] = tenT_expected_prev[3];
	end
	if (
		( unitT_expected_prev[0] !== 1'bx ) && ( unitT_prev[0] !== unitT_expected_prev[0] )
		&& ((unitT_expected_prev[0] !== last_unitT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port unitT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", unitT_expected_prev);
		$display ("     Real value = %b", unitT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_unitT_exp[0] = unitT_expected_prev[0];
	end
	if (
		( unitT_expected_prev[1] !== 1'bx ) && ( unitT_prev[1] !== unitT_expected_prev[1] )
		&& ((unitT_expected_prev[1] !== last_unitT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port unitT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", unitT_expected_prev);
		$display ("     Real value = %b", unitT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_unitT_exp[1] = unitT_expected_prev[1];
	end
	if (
		( unitT_expected_prev[2] !== 1'bx ) && ( unitT_prev[2] !== unitT_expected_prev[2] )
		&& ((unitT_expected_prev[2] !== last_unitT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port unitT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", unitT_expected_prev);
		$display ("     Real value = %b", unitT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_unitT_exp[2] = unitT_expected_prev[2];
	end
	if (
		( unitT_expected_prev[3] !== 1'bx ) && ( unitT_prev[3] !== unitT_expected_prev[3] )
		&& ((unitT_expected_prev[3] !== last_unitT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port unitT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", unitT_expected_prev);
		$display ("     Real value = %b", unitT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_unitT_exp[3] = unitT_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module createNum2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk1;
reg clk2;
// wires                                               
wire [3:0] tenT;
wire [3:0] unitT;

wire sampler;                             

// assign statements (if any)                          
createNum2 i1 (
// port map - connection between master ports and signals/registers   
	.clk1(clk1),
	.clk2(clk2),
	.tenT(tenT),
	.unitT(unitT)
);

// clk1
always
begin
	clk1 = 1'b0;
	clk1 = #10000 1'b1;
	#10000;
end 

// clk2
always
begin
	clk2 = 1'b0;
	clk2 = #10000 1'b1;
	#10000;
end 

createNum2_vlg_sample_tst tb_sample (
	.clk1(clk1),
	.clk2(clk2),
	.sampler_tx(sampler)
);

createNum2_vlg_check_tst tb_out(
	.tenT(tenT),
	.unitT(unitT),
	.sampler_rx(sampler)
);
endmodule

